# Generated from JavaParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,129,1781,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,1,0,3,0,262,8,0,
        1,0,1,0,5,0,266,8,0,10,0,12,0,269,9,0,1,0,1,0,5,0,273,8,0,10,0,12,
        0,276,9,0,1,0,1,0,1,0,3,0,281,8,0,1,1,5,1,284,8,1,10,1,12,1,287,
        9,1,1,1,1,1,1,1,1,1,1,2,1,2,3,2,295,8,2,1,2,1,2,1,2,3,2,300,8,2,
        1,2,1,2,1,3,3,3,305,8,3,1,3,1,3,1,4,5,4,310,8,4,10,4,12,4,313,9,
        4,1,4,1,4,1,4,1,4,1,4,3,4,320,8,4,1,5,1,5,1,5,1,5,1,5,3,5,327,8,
        5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,339,8,6,1,7,1,7,3,
        7,343,8,7,1,8,1,8,1,8,3,8,348,8,8,1,8,1,8,3,8,352,8,8,1,8,1,8,3,
        8,356,8,8,1,8,1,8,3,8,360,8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,368,8,
        9,10,9,12,9,371,9,9,1,9,1,9,1,10,5,10,376,8,10,10,10,12,10,379,9,
        10,1,10,1,10,1,10,5,10,384,8,10,10,10,12,10,387,9,10,1,10,3,10,390,
        8,10,1,11,1,11,1,11,5,11,395,8,11,10,11,12,11,398,9,11,1,12,1,12,
        1,12,1,12,3,12,404,8,12,1,12,1,12,3,12,408,8,12,1,12,3,12,411,8,
        12,1,12,3,12,414,8,12,1,12,1,12,1,13,1,13,1,13,5,13,421,8,13,10,
        13,12,13,424,9,13,1,14,5,14,427,8,14,10,14,12,14,430,9,14,1,14,1,
        14,3,14,434,8,14,1,14,3,14,437,8,14,1,15,1,15,5,15,441,8,15,10,15,
        12,15,444,9,15,1,16,1,16,1,16,3,16,449,8,16,1,16,1,16,3,16,453,8,
        16,1,16,1,16,3,16,457,8,16,1,16,1,16,1,17,1,17,5,17,463,8,17,10,
        17,12,17,466,9,17,1,17,1,17,1,18,1,18,5,18,472,8,18,10,18,12,18,
        475,9,18,1,18,1,18,1,19,1,19,3,19,481,8,19,1,19,1,19,3,19,485,8,
        19,1,20,3,20,488,8,20,1,20,5,20,491,8,20,10,20,12,20,494,9,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,508,
        8,21,1,22,1,22,1,22,1,22,1,22,5,22,515,8,22,10,22,12,22,518,9,22,
        1,22,1,22,3,22,522,8,22,1,22,1,22,1,23,1,23,3,23,528,8,23,1,24,1,
        24,3,24,532,8,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        27,3,27,544,8,27,1,27,1,27,1,28,5,28,549,8,28,10,28,12,28,552,9,
        28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,3,30,563,8,30,1,
        31,3,31,566,8,31,1,31,5,31,569,8,31,10,31,12,31,572,9,31,1,31,1,
        31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,584,8,32,1,33,1,
        33,1,33,1,33,5,33,590,8,33,10,33,12,33,593,9,33,1,33,1,33,1,34,1,
        34,1,34,5,34,600,8,34,10,34,12,34,603,9,34,1,34,1,34,1,34,1,35,5,
        35,609,8,35,10,35,12,35,612,9,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
        36,1,36,3,36,622,8,36,1,37,5,37,625,8,37,10,37,12,37,628,9,37,1,
        37,1,37,1,37,1,38,5,38,634,8,38,10,38,12,38,637,9,38,1,38,1,38,1,
        38,1,38,1,38,5,38,644,8,38,10,38,12,38,647,9,38,1,38,1,38,3,38,651,
        8,38,1,38,1,38,1,39,1,39,1,39,5,39,658,8,39,10,39,12,39,661,9,39,
        1,40,1,40,1,40,3,40,666,8,40,1,41,1,41,1,41,5,41,671,8,41,10,41,
        12,41,674,9,41,1,42,1,42,3,42,678,8,42,1,43,1,43,1,43,1,43,5,43,
        684,8,43,10,43,12,43,687,9,43,1,43,3,43,690,8,43,3,43,692,8,43,1,
        43,1,43,1,44,1,44,3,44,698,8,44,1,44,1,44,5,44,702,8,44,10,44,12,
        44,705,9,44,1,44,1,44,3,44,709,8,44,1,45,1,45,5,45,713,8,45,10,45,
        12,45,716,9,45,1,45,1,45,1,45,3,45,721,8,45,3,45,723,8,45,1,46,1,
        46,1,46,5,46,728,8,46,10,46,12,46,731,9,46,1,47,1,47,3,47,735,8,
        47,1,47,1,47,1,47,3,47,740,8,47,1,47,3,47,743,8,47,3,47,745,8,47,
        1,47,1,47,1,48,1,48,1,48,1,48,5,48,753,8,48,10,48,12,48,756,9,48,
        1,48,1,48,1,49,1,49,1,49,5,49,763,8,49,10,49,12,49,766,9,49,1,49,
        1,49,3,49,770,8,49,1,49,3,49,773,8,49,1,50,5,50,776,8,50,10,50,12,
        50,779,9,50,1,50,1,50,1,50,1,51,5,51,785,8,51,10,51,12,51,788,9,
        51,1,51,1,51,5,51,792,8,51,10,51,12,51,795,9,51,1,51,1,51,1,51,1,
        52,1,52,1,52,5,52,803,8,52,10,52,12,52,806,9,52,1,53,5,53,809,8,
        53,10,53,12,53,812,9,53,1,53,1,53,1,53,1,54,1,54,1,54,5,54,820,8,
        54,10,54,12,54,823,9,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        832,8,55,1,56,1,56,1,57,1,57,1,58,1,58,1,58,5,58,841,8,58,10,58,
        12,58,844,9,58,1,58,1,58,1,58,1,59,1,59,1,59,3,59,852,8,59,1,59,
        1,59,1,59,3,59,857,8,59,1,59,3,59,860,8,59,1,60,1,60,1,60,5,60,865,
        8,60,10,60,12,60,868,9,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,3,62,
        877,8,62,1,63,1,63,1,63,1,63,5,63,883,8,63,10,63,12,63,886,9,63,
        3,63,888,8,63,1,63,3,63,891,8,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
        64,1,65,1,65,5,65,902,8,65,10,65,12,65,905,9,65,1,65,1,65,1,66,5,
        66,910,8,66,10,66,12,66,913,9,66,1,66,1,66,3,66,917,8,66,1,67,1,
        67,1,67,1,67,1,67,1,67,3,67,925,8,67,1,67,1,67,3,67,929,8,67,1,67,
        1,67,3,67,933,8,67,1,67,1,67,3,67,937,8,67,1,67,1,67,3,67,941,8,
        67,3,67,943,8,67,1,68,1,68,3,68,947,8,68,1,69,1,69,1,69,1,69,3,69,
        953,8,69,1,70,1,70,1,71,1,71,1,71,1,72,3,72,961,8,72,1,72,1,72,1,
        72,1,72,1,73,1,73,5,73,969,8,73,10,73,12,73,972,9,73,1,73,1,73,1,
        74,1,74,5,74,978,8,74,10,74,12,74,981,9,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,3,74,990,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,998,
        8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        3,74,1012,8,74,1,75,1,75,1,76,1,76,1,76,3,76,1019,8,76,1,76,1,76,
        1,76,3,76,1024,8,76,1,76,1,76,1,77,1,77,3,77,1030,8,77,1,77,1,77,
        1,78,1,78,1,78,5,78,1037,8,78,10,78,12,78,1040,9,78,1,79,1,79,1,
        79,1,80,1,80,1,80,5,80,1048,8,80,10,80,12,80,1051,9,80,1,80,1,80,
        1,81,1,81,5,81,1057,8,81,10,81,12,81,1060,9,81,1,81,1,81,1,82,1,
        82,1,82,1,82,1,82,1,82,3,82,1070,8,82,1,83,5,83,1073,8,83,10,83,
        12,83,1076,9,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1086,
        8,83,1,84,1,84,1,85,1,85,1,86,5,86,1093,8,86,10,86,12,86,1096,9,
        86,1,86,1,86,1,86,3,86,1101,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1108,
        8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1117,8,87,1,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        1,87,1,87,1,87,1,87,4,87,1138,8,87,11,87,12,87,1139,1,87,3,87,1143,
        8,87,1,87,3,87,1146,8,87,1,87,1,87,1,87,1,87,5,87,1152,8,87,10,87,
        12,87,1155,9,87,1,87,3,87,1158,8,87,1,87,1,87,1,87,1,87,5,87,1164,
        8,87,10,87,12,87,1167,9,87,1,87,5,87,1170,8,87,10,87,12,87,1173,
        9,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1183,8,87,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,3,87,1192,8,87,1,87,1,87,1,87,3,87,
        1197,8,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
        3,87,1210,8,87,1,87,1,87,1,87,1,87,3,87,1216,8,87,1,88,1,88,1,88,
        5,88,1221,8,88,10,88,12,88,1224,9,88,1,88,1,88,1,88,1,88,1,88,1,
        89,1,89,1,89,5,89,1234,8,89,10,89,12,89,1237,9,89,1,90,1,90,1,90,
        1,91,1,91,1,91,3,91,1245,8,91,1,91,1,91,1,92,1,92,1,92,5,92,1252,
        8,92,10,92,12,92,1255,9,92,1,93,5,93,1258,8,93,10,93,12,93,1261,
        9,93,1,93,1,93,1,93,1,93,1,93,3,93,1268,8,93,1,93,1,93,1,93,1,93,
        3,93,1274,8,93,1,94,4,94,1277,8,94,11,94,12,94,1278,1,94,4,94,1282,
        8,94,11,94,12,94,1283,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1292,8,
        95,1,95,1,95,1,95,3,95,1297,8,95,1,96,1,96,3,96,1301,8,96,1,96,1,
        96,3,96,1305,8,96,1,96,1,96,3,96,1309,8,96,3,96,1311,8,96,1,97,1,
        97,3,97,1315,8,97,1,98,5,98,1318,8,98,10,98,12,98,1321,9,98,1,98,
        1,98,3,98,1325,8,98,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,
        1,100,1,100,5,100,1338,8,100,10,100,12,100,1341,9,100,1,101,1,101,
        1,101,3,101,1346,8,101,1,101,1,101,1,102,1,102,1,102,1,102,1,102,
        1,102,3,102,1356,8,102,1,102,1,102,3,102,1360,8,102,1,102,1,102,
        1,102,3,102,1365,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        5,102,1374,8,102,10,102,12,102,1377,9,102,1,102,1,102,1,102,5,102,
        1382,8,102,10,102,12,102,1385,9,102,1,102,1,102,1,102,1,102,1,102,
        1,102,3,102,1393,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1409,8,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1454,
        8,102,1,102,1,102,1,102,1,102,3,102,1460,8,102,1,102,1,102,1,102,
        3,102,1465,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
        1474,8,102,5,102,1476,8,102,10,102,12,102,1479,9,102,1,103,5,103,
        1482,8,103,10,103,12,103,1485,9,103,1,103,1,103,5,103,1489,8,103,
        10,103,12,103,1492,9,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,
        1,105,1,105,3,105,1503,8,105,1,105,1,105,1,105,1,105,1,105,5,105,
        1510,8,105,10,105,12,105,1513,9,105,1,105,1,105,1,105,1,105,3,105,
        1519,8,105,1,105,3,105,1522,8,105,1,106,1,106,3,106,1526,8,106,1,
        107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,3,107,1544,8,107,3,107,1546,8,107,
        1,108,1,108,1,108,1,108,5,108,1552,8,108,10,108,12,108,1555,9,108,
        1,108,1,108,1,109,1,109,1,109,1,109,3,109,1563,8,109,1,109,1,109,
        1,109,1,109,1,109,3,109,1570,8,109,1,110,1,110,1,110,1,110,1,110,
        1,110,5,110,1578,8,110,10,110,12,110,1581,9,110,1,110,1,110,5,110,
        1585,8,110,10,110,12,110,1588,9,110,1,110,1,110,1,110,5,110,1593,
        8,110,10,110,12,110,1596,9,110,3,110,1598,8,110,1,110,1,110,1,110,
        5,110,1603,8,110,10,110,12,110,1606,9,110,1,111,1,111,5,111,1610,
        8,111,10,111,12,111,1613,9,111,3,111,1615,8,111,1,112,1,112,1,112,
        3,112,1620,8,112,1,112,5,112,1623,8,112,10,112,12,112,1626,9,112,
        1,112,1,112,3,112,1630,8,112,1,113,3,113,1633,8,113,1,113,1,113,
        1,113,1,113,1,113,1,113,3,113,1641,8,113,1,114,1,114,3,114,1645,
        8,114,1,114,1,114,1,114,3,114,1650,8,114,5,114,1652,8,114,10,114,
        12,114,1655,9,114,1,114,3,114,1658,8,114,1,115,1,115,3,115,1662,
        8,115,1,115,1,115,1,116,1,116,4,116,1668,8,116,11,116,12,116,1669,
        1,116,1,116,1,116,1,116,1,116,4,116,1677,8,116,11,116,12,116,1678,
        1,116,1,116,5,116,1683,8,116,10,116,12,116,1686,9,116,3,116,1688,
        8,116,1,117,1,117,3,117,1692,8,117,1,118,1,118,1,118,1,119,1,119,
        1,119,3,119,1700,8,119,1,120,1,120,1,120,3,120,1705,8,120,1,121,
        1,121,1,121,1,121,1,122,1,122,1,122,5,122,1714,8,122,10,122,12,122,
        1717,9,122,1,123,5,123,1720,8,123,10,123,12,123,1723,9,123,1,123,
        1,123,3,123,1727,8,123,1,123,5,123,1730,8,123,10,123,12,123,1733,
        9,123,1,123,1,123,5,123,1737,8,123,10,123,12,123,1740,9,123,1,124,
        1,124,1,125,1,125,1,125,1,125,5,125,1748,8,125,10,125,12,125,1751,
        9,125,1,125,1,125,1,126,1,126,1,126,3,126,1758,8,126,1,126,1,126,
        3,126,1762,8,126,3,126,1764,8,126,1,127,1,127,1,127,1,127,1,127,
        3,127,1771,8,127,1,128,1,128,3,128,1775,8,128,1,128,1,128,1,129,
        1,129,1,129,0,2,204,220,130,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,0,15,2,0,17,17,40,40,1,0,
        67,70,1,0,71,72,2,0,38,38,60,60,2,0,51,65,129,129,3,0,51,60,63,65,
        129,129,2,0,90,91,100,103,2,0,104,105,109,109,1,0,102,103,2,0,88,
        89,95,96,2,0,94,94,97,97,2,0,87,87,110,120,1,0,100,101,2,0,93,93,
        121,121,8,0,3,3,5,5,8,8,14,14,20,20,27,27,29,29,37,37,1977,0,280,
        1,0,0,0,2,285,1,0,0,0,4,292,1,0,0,0,6,304,1,0,0,0,8,311,1,0,0,0,
        10,326,1,0,0,0,12,338,1,0,0,0,14,342,1,0,0,0,16,344,1,0,0,0,18,363,
        1,0,0,0,20,377,1,0,0,0,22,391,1,0,0,0,24,399,1,0,0,0,26,417,1,0,
        0,0,28,428,1,0,0,0,30,438,1,0,0,0,32,445,1,0,0,0,34,460,1,0,0,0,
        36,469,1,0,0,0,38,484,1,0,0,0,40,487,1,0,0,0,42,507,1,0,0,0,44,509,
        1,0,0,0,46,527,1,0,0,0,48,531,1,0,0,0,50,533,1,0,0,0,52,536,1,0,
        0,0,54,539,1,0,0,0,56,550,1,0,0,0,58,556,1,0,0,0,60,562,1,0,0,0,
        62,565,1,0,0,0,64,583,1,0,0,0,66,585,1,0,0,0,68,596,1,0,0,0,70,610,
        1,0,0,0,72,621,1,0,0,0,74,626,1,0,0,0,76,635,1,0,0,0,78,654,1,0,
        0,0,80,662,1,0,0,0,82,667,1,0,0,0,84,677,1,0,0,0,86,679,1,0,0,0,
        88,703,1,0,0,0,90,722,1,0,0,0,92,724,1,0,0,0,94,732,1,0,0,0,96,748,
        1,0,0,0,98,772,1,0,0,0,100,777,1,0,0,0,102,786,1,0,0,0,104,799,1,
        0,0,0,106,810,1,0,0,0,108,816,1,0,0,0,110,831,1,0,0,0,112,833,1,
        0,0,0,114,835,1,0,0,0,116,842,1,0,0,0,118,851,1,0,0,0,120,861,1,
        0,0,0,122,869,1,0,0,0,124,876,1,0,0,0,126,878,1,0,0,0,128,894,1,
        0,0,0,130,899,1,0,0,0,132,916,1,0,0,0,134,942,1,0,0,0,136,946,1,
        0,0,0,138,948,1,0,0,0,140,954,1,0,0,0,142,956,1,0,0,0,144,960,1,
        0,0,0,146,966,1,0,0,0,148,1011,1,0,0,0,150,1013,1,0,0,0,152,1015,
        1,0,0,0,154,1027,1,0,0,0,156,1033,1,0,0,0,158,1041,1,0,0,0,160,1044,
        1,0,0,0,162,1054,1,0,0,0,164,1069,1,0,0,0,166,1074,1,0,0,0,168,1087,
        1,0,0,0,170,1089,1,0,0,0,172,1094,1,0,0,0,174,1215,1,0,0,0,176,1217,
        1,0,0,0,178,1230,1,0,0,0,180,1238,1,0,0,0,182,1241,1,0,0,0,184,1248,
        1,0,0,0,186,1273,1,0,0,0,188,1276,1,0,0,0,190,1296,1,0,0,0,192,1310,
        1,0,0,0,194,1314,1,0,0,0,196,1319,1,0,0,0,198,1330,1,0,0,0,200,1334,
        1,0,0,0,202,1345,1,0,0,0,204,1392,1,0,0,0,206,1483,1,0,0,0,208,1495,
        1,0,0,0,210,1521,1,0,0,0,212,1525,1,0,0,0,214,1545,1,0,0,0,216,1547,
        1,0,0,0,218,1569,1,0,0,0,220,1597,1,0,0,0,222,1614,1,0,0,0,224,1619,
        1,0,0,0,226,1640,1,0,0,0,228,1657,1,0,0,0,230,1659,1,0,0,0,232,1687,
        1,0,0,0,234,1689,1,0,0,0,236,1693,1,0,0,0,238,1699,1,0,0,0,240,1704,
        1,0,0,0,242,1706,1,0,0,0,244,1710,1,0,0,0,246,1721,1,0,0,0,248,1741,
        1,0,0,0,250,1743,1,0,0,0,252,1763,1,0,0,0,254,1770,1,0,0,0,256,1772,
        1,0,0,0,258,1778,1,0,0,0,260,262,3,2,1,0,261,260,1,0,0,0,261,262,
        1,0,0,0,262,267,1,0,0,0,263,266,3,4,2,0,264,266,5,84,0,0,265,263,
        1,0,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,
        1,0,0,0,268,274,1,0,0,0,269,267,1,0,0,0,270,273,3,6,3,0,271,273,
        5,84,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,
        1,0,0,0,274,275,1,0,0,0,275,281,1,0,0,0,276,274,1,0,0,0,277,278,
        3,144,72,0,278,279,5,0,0,1,279,281,1,0,0,0,280,261,1,0,0,0,280,277,
        1,0,0,0,281,1,1,0,0,0,282,284,3,118,59,0,283,282,1,0,0,0,284,287,
        1,0,0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,
        1,0,0,0,288,289,5,32,0,0,289,290,3,108,54,0,290,291,5,84,0,0,291,
        3,1,0,0,0,292,294,5,25,0,0,293,295,5,38,0,0,294,293,1,0,0,0,294,
        295,1,0,0,0,295,296,1,0,0,0,296,299,3,108,54,0,297,298,5,86,0,0,
        298,300,5,104,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,301,1,0,0,
        0,301,302,5,84,0,0,302,5,1,0,0,0,303,305,3,258,129,0,304,303,1,0,
        0,0,304,305,1,0,0,0,305,306,1,0,0,0,306,307,3,8,4,0,307,7,1,0,0,
        0,308,310,3,12,6,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,
        0,311,312,1,0,0,0,312,319,1,0,0,0,313,311,1,0,0,0,314,320,3,16,8,
        0,315,320,3,24,12,0,316,320,3,32,16,0,317,320,3,128,64,0,318,320,
        3,152,76,0,319,314,1,0,0,0,319,315,1,0,0,0,319,316,1,0,0,0,319,317,
        1,0,0,0,319,318,1,0,0,0,320,9,1,0,0,0,321,327,3,12,6,0,322,327,5,
        30,0,0,323,327,5,42,0,0,324,327,5,46,0,0,325,327,5,49,0,0,326,321,
        1,0,0,0,326,322,1,0,0,0,326,323,1,0,0,0,326,324,1,0,0,0,326,325,
        1,0,0,0,327,11,1,0,0,0,328,339,3,118,59,0,329,339,5,35,0,0,330,339,
        5,34,0,0,331,339,5,33,0,0,332,339,5,38,0,0,333,339,5,1,0,0,334,339,
        5,18,0,0,335,339,5,39,0,0,336,339,5,64,0,0,337,339,5,66,0,0,338,
        328,1,0,0,0,338,329,1,0,0,0,338,330,1,0,0,0,338,331,1,0,0,0,338,
        332,1,0,0,0,338,333,1,0,0,0,338,334,1,0,0,0,338,335,1,0,0,0,338,
        336,1,0,0,0,338,337,1,0,0,0,339,13,1,0,0,0,340,343,5,18,0,0,341,
        343,3,118,59,0,342,340,1,0,0,0,342,341,1,0,0,0,343,15,1,0,0,0,344,
        345,5,9,0,0,345,347,3,168,84,0,346,348,3,18,9,0,347,346,1,0,0,0,
        347,348,1,0,0,0,348,351,1,0,0,0,349,350,5,17,0,0,350,352,3,246,123,
        0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,0,353,354,5,24,0,
        0,354,356,3,244,122,0,355,353,1,0,0,0,355,356,1,0,0,0,356,359,1,
        0,0,0,357,358,5,65,0,0,358,360,3,244,122,0,359,357,1,0,0,0,359,360,
        1,0,0,0,360,361,1,0,0,0,361,362,3,34,17,0,362,17,1,0,0,0,363,364,
        5,89,0,0,364,369,3,20,10,0,365,366,5,85,0,0,366,368,3,20,10,0,367,
        365,1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,
        372,1,0,0,0,371,369,1,0,0,0,372,373,5,88,0,0,373,19,1,0,0,0,374,
        376,3,118,59,0,375,374,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,
        378,1,0,0,0,378,380,1,0,0,0,379,377,1,0,0,0,380,389,3,168,84,0,381,
        385,5,17,0,0,382,384,3,118,59,0,383,382,1,0,0,0,384,387,1,0,0,0,
        385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,
        388,390,3,22,11,0,389,381,1,0,0,0,389,390,1,0,0,0,390,21,1,0,0,0,
        391,396,3,246,123,0,392,393,5,106,0,0,393,395,3,246,123,0,394,392,
        1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,23,1,
        0,0,0,398,396,1,0,0,0,399,400,5,16,0,0,400,403,3,168,84,0,401,402,
        5,24,0,0,402,404,3,244,122,0,403,401,1,0,0,0,403,404,1,0,0,0,404,
        405,1,0,0,0,405,407,5,80,0,0,406,408,3,26,13,0,407,406,1,0,0,0,407,
        408,1,0,0,0,408,410,1,0,0,0,409,411,5,85,0,0,410,409,1,0,0,0,410,
        411,1,0,0,0,411,413,1,0,0,0,412,414,3,30,15,0,413,412,1,0,0,0,413,
        414,1,0,0,0,414,415,1,0,0,0,415,416,5,81,0,0,416,25,1,0,0,0,417,
        422,3,28,14,0,418,419,5,85,0,0,419,421,3,28,14,0,420,418,1,0,0,0,
        421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,27,1,0,0,0,424,
        422,1,0,0,0,425,427,3,118,59,0,426,425,1,0,0,0,427,430,1,0,0,0,428,
        426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,
        433,3,168,84,0,432,434,3,256,128,0,433,432,1,0,0,0,433,434,1,0,0,
        0,434,436,1,0,0,0,435,437,3,34,17,0,436,435,1,0,0,0,436,437,1,0,
        0,0,437,29,1,0,0,0,438,442,5,84,0,0,439,441,3,38,19,0,440,439,1,
        0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,31,1,0,
        0,0,444,442,1,0,0,0,445,446,5,28,0,0,446,448,3,168,84,0,447,449,
        3,18,9,0,448,447,1,0,0,0,448,449,1,0,0,0,449,452,1,0,0,0,450,451,
        5,17,0,0,451,453,3,244,122,0,452,450,1,0,0,0,452,453,1,0,0,0,453,
        456,1,0,0,0,454,455,5,65,0,0,455,457,3,244,122,0,456,454,1,0,0,0,
        456,457,1,0,0,0,457,458,1,0,0,0,458,459,3,36,18,0,459,33,1,0,0,0,
        460,464,5,80,0,0,461,463,3,38,19,0,462,461,1,0,0,0,463,466,1,0,0,
        0,464,462,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,
        0,467,468,5,81,0,0,468,35,1,0,0,0,469,473,5,80,0,0,470,472,3,60,
        30,0,471,470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,
        0,0,474,476,1,0,0,0,475,473,1,0,0,0,476,477,5,81,0,0,477,37,1,0,
        0,0,478,485,5,84,0,0,479,481,5,38,0,0,480,479,1,0,0,0,480,481,1,
        0,0,0,481,482,1,0,0,0,482,485,3,162,81,0,483,485,3,40,20,0,484,478,
        1,0,0,0,484,480,1,0,0,0,484,483,1,0,0,0,485,39,1,0,0,0,486,488,3,
        258,129,0,487,486,1,0,0,0,487,488,1,0,0,0,488,492,1,0,0,0,489,491,
        3,10,5,0,490,489,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,
        1,0,0,0,493,495,1,0,0,0,494,492,1,0,0,0,495,496,3,42,21,0,496,41,
        1,0,0,0,497,508,3,152,76,0,498,508,3,44,22,0,499,508,3,50,25,0,500,
        508,3,58,29,0,501,508,3,54,27,0,502,508,3,52,26,0,503,508,3,32,16,
        0,504,508,3,128,64,0,505,508,3,16,8,0,506,508,3,24,12,0,507,497,
        1,0,0,0,507,498,1,0,0,0,507,499,1,0,0,0,507,500,1,0,0,0,507,501,
        1,0,0,0,507,502,1,0,0,0,507,503,1,0,0,0,507,504,1,0,0,0,507,505,
        1,0,0,0,507,506,1,0,0,0,508,43,1,0,0,0,509,510,3,48,24,0,510,511,
        3,168,84,0,511,516,3,94,47,0,512,513,5,82,0,0,513,515,5,83,0,0,514,
        512,1,0,0,0,515,518,1,0,0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,
        521,1,0,0,0,518,516,1,0,0,0,519,520,5,45,0,0,520,522,3,92,46,0,521,
        519,1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,524,3,46,23,0,524,
        45,1,0,0,0,525,528,3,162,81,0,526,528,5,84,0,0,527,525,1,0,0,0,527,
        526,1,0,0,0,528,47,1,0,0,0,529,532,3,246,123,0,530,532,5,48,0,0,
        531,529,1,0,0,0,531,530,1,0,0,0,532,49,1,0,0,0,533,534,3,18,9,0,
        534,535,3,44,22,0,535,51,1,0,0,0,536,537,3,18,9,0,537,538,3,54,27,
        0,538,53,1,0,0,0,539,540,3,168,84,0,540,543,3,94,47,0,541,542,5,
        45,0,0,542,544,3,92,46,0,543,541,1,0,0,0,543,544,1,0,0,0,544,545,
        1,0,0,0,545,546,3,162,81,0,546,55,1,0,0,0,547,549,3,10,5,0,548,547,
        1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,
        1,0,0,0,552,550,1,0,0,0,553,554,3,168,84,0,554,555,3,162,81,0,555,
        57,1,0,0,0,556,557,3,246,123,0,557,558,3,78,39,0,558,559,5,84,0,
        0,559,59,1,0,0,0,560,563,3,62,31,0,561,563,5,84,0,0,562,560,1,0,
        0,0,562,561,1,0,0,0,563,61,1,0,0,0,564,566,3,258,129,0,565,564,1,
        0,0,0,565,566,1,0,0,0,566,570,1,0,0,0,567,569,3,10,5,0,568,567,1,
        0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,573,1,
        0,0,0,572,570,1,0,0,0,573,574,3,64,32,0,574,63,1,0,0,0,575,584,3,
        152,76,0,576,584,3,66,33,0,577,584,3,70,35,0,578,584,3,74,37,0,579,
        584,3,32,16,0,580,584,3,128,64,0,581,584,3,16,8,0,582,584,3,24,12,
        0,583,575,1,0,0,0,583,576,1,0,0,0,583,577,1,0,0,0,583,578,1,0,0,
        0,583,579,1,0,0,0,583,580,1,0,0,0,583,581,1,0,0,0,583,582,1,0,0,
        0,584,65,1,0,0,0,585,586,3,246,123,0,586,591,3,68,34,0,587,588,5,
        85,0,0,588,590,3,68,34,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,
        1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,591,1,0,0,0,594,595,
        5,84,0,0,595,67,1,0,0,0,596,601,3,168,84,0,597,598,5,82,0,0,598,
        600,5,83,0,0,599,597,1,0,0,0,600,603,1,0,0,0,601,599,1,0,0,0,601,
        602,1,0,0,0,602,604,1,0,0,0,603,601,1,0,0,0,604,605,5,87,0,0,605,
        606,3,84,42,0,606,69,1,0,0,0,607,609,3,72,36,0,608,607,1,0,0,0,609,
        612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,
        610,1,0,0,0,613,614,3,76,38,0,614,71,1,0,0,0,615,622,3,118,59,0,
        616,622,5,35,0,0,617,622,5,1,0,0,618,622,5,12,0,0,619,622,5,38,0,
        0,620,622,5,39,0,0,621,615,1,0,0,0,621,616,1,0,0,0,621,617,1,0,0,
        0,621,618,1,0,0,0,621,619,1,0,0,0,621,620,1,0,0,0,622,73,1,0,0,0,
        623,625,3,72,36,0,624,623,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,
        0,626,627,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,0,629,630,3,18,9,
        0,630,631,3,76,38,0,631,75,1,0,0,0,632,634,3,118,59,0,633,632,1,
        0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,638,1,
        0,0,0,637,635,1,0,0,0,638,639,3,48,24,0,639,640,3,168,84,0,640,645,
        3,94,47,0,641,642,5,82,0,0,642,644,5,83,0,0,643,641,1,0,0,0,644,
        647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,650,1,0,0,0,647,
        645,1,0,0,0,648,649,5,45,0,0,649,651,3,92,46,0,650,648,1,0,0,0,650,
        651,1,0,0,0,651,652,1,0,0,0,652,653,3,46,23,0,653,77,1,0,0,0,654,
        659,3,80,40,0,655,656,5,85,0,0,656,658,3,80,40,0,657,655,1,0,0,0,
        658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,79,1,0,0,0,661,
        659,1,0,0,0,662,665,3,82,41,0,663,664,5,87,0,0,664,666,3,84,42,0,
        665,663,1,0,0,0,665,666,1,0,0,0,666,81,1,0,0,0,667,672,3,168,84,
        0,668,669,5,82,0,0,669,671,5,83,0,0,670,668,1,0,0,0,671,674,1,0,
        0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,83,1,0,0,0,674,672,1,0,0,
        0,675,678,3,86,43,0,676,678,3,204,102,0,677,675,1,0,0,0,677,676,
        1,0,0,0,678,85,1,0,0,0,679,691,5,80,0,0,680,685,3,84,42,0,681,682,
        5,85,0,0,682,684,3,84,42,0,683,681,1,0,0,0,684,687,1,0,0,0,685,683,
        1,0,0,0,685,686,1,0,0,0,686,689,1,0,0,0,687,685,1,0,0,0,688,690,
        5,85,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,680,
        1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,694,5,81,0,0,694,87,
        1,0,0,0,695,697,3,168,84,0,696,698,3,250,125,0,697,696,1,0,0,0,697,
        698,1,0,0,0,698,699,1,0,0,0,699,700,5,86,0,0,700,702,1,0,0,0,701,
        695,1,0,0,0,702,705,1,0,0,0,703,701,1,0,0,0,703,704,1,0,0,0,704,
        706,1,0,0,0,705,703,1,0,0,0,706,708,3,170,85,0,707,709,3,250,125,
        0,708,707,1,0,0,0,708,709,1,0,0,0,709,89,1,0,0,0,710,723,3,246,123,
        0,711,713,3,118,59,0,712,711,1,0,0,0,713,716,1,0,0,0,714,712,1,0,
        0,0,714,715,1,0,0,0,715,717,1,0,0,0,716,714,1,0,0,0,717,720,5,92,
        0,0,718,719,7,0,0,0,719,721,3,246,123,0,720,718,1,0,0,0,720,721,
        1,0,0,0,721,723,1,0,0,0,722,710,1,0,0,0,722,714,1,0,0,0,723,91,1,
        0,0,0,724,729,3,108,54,0,725,726,5,85,0,0,726,728,3,108,54,0,727,
        725,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,
        93,1,0,0,0,731,729,1,0,0,0,732,744,5,78,0,0,733,735,3,96,48,0,734,
        733,1,0,0,0,734,735,1,0,0,0,735,745,1,0,0,0,736,739,3,96,48,0,737,
        738,5,85,0,0,738,740,3,98,49,0,739,737,1,0,0,0,739,740,1,0,0,0,740,
        745,1,0,0,0,741,743,3,98,49,0,742,741,1,0,0,0,742,743,1,0,0,0,743,
        745,1,0,0,0,744,734,1,0,0,0,744,736,1,0,0,0,744,742,1,0,0,0,745,
        746,1,0,0,0,746,747,5,79,0,0,747,95,1,0,0,0,748,754,3,246,123,0,
        749,750,3,168,84,0,750,751,5,86,0,0,751,753,1,0,0,0,752,749,1,0,
        0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,757,1,0,
        0,0,756,754,1,0,0,0,757,758,5,43,0,0,758,97,1,0,0,0,759,764,3,100,
        50,0,760,761,5,85,0,0,761,763,3,100,50,0,762,760,1,0,0,0,763,766,
        1,0,0,0,764,762,1,0,0,0,764,765,1,0,0,0,765,769,1,0,0,0,766,764,
        1,0,0,0,767,768,5,85,0,0,768,770,3,102,51,0,769,767,1,0,0,0,769,
        770,1,0,0,0,770,773,1,0,0,0,771,773,3,102,51,0,772,759,1,0,0,0,772,
        771,1,0,0,0,773,99,1,0,0,0,774,776,3,14,7,0,775,774,1,0,0,0,776,
        779,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,
        777,1,0,0,0,780,781,3,246,123,0,781,782,3,82,41,0,782,101,1,0,0,
        0,783,785,3,14,7,0,784,783,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,
        0,786,787,1,0,0,0,787,789,1,0,0,0,788,786,1,0,0,0,789,793,3,246,
        123,0,790,792,3,118,59,0,791,790,1,0,0,0,792,795,1,0,0,0,793,791,
        1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,793,1,0,0,0,796,797,
        5,124,0,0,797,798,3,82,41,0,798,103,1,0,0,0,799,804,3,106,53,0,800,
        801,5,85,0,0,801,803,3,106,53,0,802,800,1,0,0,0,803,806,1,0,0,0,
        804,802,1,0,0,0,804,805,1,0,0,0,805,105,1,0,0,0,806,804,1,0,0,0,
        807,809,3,14,7,0,808,807,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,
        810,811,1,0,0,0,811,813,1,0,0,0,812,810,1,0,0,0,813,814,5,61,0,0,
        814,815,3,168,84,0,815,107,1,0,0,0,816,821,3,168,84,0,817,818,5,
        86,0,0,818,820,3,168,84,0,819,817,1,0,0,0,820,823,1,0,0,0,821,819,
        1,0,0,0,821,822,1,0,0,0,822,109,1,0,0,0,823,821,1,0,0,0,824,832,
        3,112,56,0,825,832,3,114,57,0,826,832,5,74,0,0,827,832,5,75,0,0,
        828,832,5,73,0,0,829,832,5,77,0,0,830,832,5,76,0,0,831,824,1,0,0,
        0,831,825,1,0,0,0,831,826,1,0,0,0,831,827,1,0,0,0,831,828,1,0,0,
        0,831,829,1,0,0,0,831,830,1,0,0,0,832,111,1,0,0,0,833,834,7,1,0,
        0,834,113,1,0,0,0,835,836,7,2,0,0,836,115,1,0,0,0,837,838,3,168,
        84,0,838,839,5,86,0,0,839,841,1,0,0,0,840,837,1,0,0,0,841,844,1,
        0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,
        0,0,0,845,846,5,123,0,0,846,847,3,168,84,0,847,117,1,0,0,0,848,849,
        5,123,0,0,849,852,3,108,54,0,850,852,3,116,58,0,851,848,1,0,0,0,
        851,850,1,0,0,0,852,859,1,0,0,0,853,856,5,78,0,0,854,857,3,120,60,
        0,855,857,3,124,62,0,856,854,1,0,0,0,856,855,1,0,0,0,856,857,1,0,
        0,0,857,858,1,0,0,0,858,860,5,79,0,0,859,853,1,0,0,0,859,860,1,0,
        0,0,860,119,1,0,0,0,861,866,3,122,61,0,862,863,5,85,0,0,863,865,
        3,122,61,0,864,862,1,0,0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,
        1,0,0,0,867,121,1,0,0,0,868,866,1,0,0,0,869,870,3,168,84,0,870,871,
        5,87,0,0,871,872,3,124,62,0,872,123,1,0,0,0,873,877,3,204,102,0,
        874,877,3,118,59,0,875,877,3,126,63,0,876,873,1,0,0,0,876,874,1,
        0,0,0,876,875,1,0,0,0,877,125,1,0,0,0,878,887,5,80,0,0,879,884,3,
        124,62,0,880,881,5,85,0,0,881,883,3,124,62,0,882,880,1,0,0,0,883,
        886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,888,1,0,0,0,886,
        884,1,0,0,0,887,879,1,0,0,0,887,888,1,0,0,0,888,890,1,0,0,0,889,
        891,5,85,0,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,
        893,5,81,0,0,893,127,1,0,0,0,894,895,5,123,0,0,895,896,5,28,0,0,
        896,897,3,168,84,0,897,898,3,130,65,0,898,129,1,0,0,0,899,903,5,
        80,0,0,900,902,3,132,66,0,901,900,1,0,0,0,902,905,1,0,0,0,903,901,
        1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,903,1,0,0,0,906,907,
        5,81,0,0,907,131,1,0,0,0,908,910,3,10,5,0,909,908,1,0,0,0,910,913,
        1,0,0,0,911,909,1,0,0,0,911,912,1,0,0,0,912,914,1,0,0,0,913,911,
        1,0,0,0,914,917,3,134,67,0,915,917,5,84,0,0,916,911,1,0,0,0,916,
        915,1,0,0,0,917,133,1,0,0,0,918,919,3,246,123,0,919,920,3,136,68,
        0,920,921,5,84,0,0,921,943,1,0,0,0,922,924,3,16,8,0,923,925,5,84,
        0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,943,1,0,0,0,926,928,3,32,
        16,0,927,929,5,84,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,943,1,
        0,0,0,930,932,3,24,12,0,931,933,5,84,0,0,932,931,1,0,0,0,932,933,
        1,0,0,0,933,943,1,0,0,0,934,936,3,128,64,0,935,937,5,84,0,0,936,
        935,1,0,0,0,936,937,1,0,0,0,937,943,1,0,0,0,938,940,3,152,76,0,939,
        941,5,84,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,943,1,0,0,0,942,
        918,1,0,0,0,942,922,1,0,0,0,942,926,1,0,0,0,942,930,1,0,0,0,942,
        934,1,0,0,0,942,938,1,0,0,0,943,135,1,0,0,0,944,947,3,138,69,0,945,
        947,3,140,70,0,946,944,1,0,0,0,946,945,1,0,0,0,947,137,1,0,0,0,948,
        949,3,168,84,0,949,950,5,78,0,0,950,952,5,79,0,0,951,953,3,142,71,
        0,952,951,1,0,0,0,952,953,1,0,0,0,953,139,1,0,0,0,954,955,3,78,39,
        0,955,141,1,0,0,0,956,957,5,12,0,0,957,958,3,124,62,0,958,143,1,
        0,0,0,959,961,5,52,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,
        0,0,0,962,963,5,51,0,0,963,964,3,108,54,0,964,965,3,146,73,0,965,
        145,1,0,0,0,966,970,5,80,0,0,967,969,3,148,74,0,968,967,1,0,0,0,
        969,972,1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,0,
        972,970,1,0,0,0,973,974,5,81,0,0,974,147,1,0,0,0,975,979,5,53,0,
        0,976,978,3,150,75,0,977,976,1,0,0,0,978,981,1,0,0,0,979,977,1,0,
        0,0,979,980,1,0,0,0,980,982,1,0,0,0,981,979,1,0,0,0,982,983,3,108,
        54,0,983,984,5,84,0,0,984,1012,1,0,0,0,985,986,5,54,0,0,986,989,
        3,108,54,0,987,988,5,56,0,0,988,990,3,108,54,0,989,987,1,0,0,0,989,
        990,1,0,0,0,990,991,1,0,0,0,991,992,5,84,0,0,992,1012,1,0,0,0,993,
        994,5,55,0,0,994,997,3,108,54,0,995,996,5,56,0,0,996,998,3,108,54,
        0,997,995,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,84,
        0,0,1000,1012,1,0,0,0,1001,1002,5,57,0,0,1002,1003,3,108,54,0,1003,
        1004,5,84,0,0,1004,1012,1,0,0,0,1005,1006,5,58,0,0,1006,1007,3,108,
        54,0,1007,1008,5,59,0,0,1008,1009,3,108,54,0,1009,1010,5,84,0,0,
        1010,1012,1,0,0,0,1011,975,1,0,0,0,1011,985,1,0,0,0,1011,993,1,0,
        0,0,1011,1001,1,0,0,0,1011,1005,1,0,0,0,1012,149,1,0,0,0,1013,1014,
        7,3,0,0,1014,151,1,0,0,0,1015,1016,5,63,0,0,1016,1018,3,168,84,0,
        1017,1019,3,18,9,0,1018,1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,
        1,0,0,0,1020,1023,3,154,77,0,1021,1022,5,24,0,0,1022,1024,3,244,
        122,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,0,0,1025,
        1026,3,160,80,0,1026,153,1,0,0,0,1027,1029,5,78,0,0,1028,1030,3,
        156,78,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,
        1032,5,79,0,0,1032,155,1,0,0,0,1033,1038,3,158,79,0,1034,1035,5,
        85,0,0,1035,1037,3,158,79,0,1036,1034,1,0,0,0,1037,1040,1,0,0,0,
        1038,1036,1,0,0,0,1038,1039,1,0,0,0,1039,157,1,0,0,0,1040,1038,1,
        0,0,0,1041,1042,3,246,123,0,1042,1043,3,168,84,0,1043,159,1,0,0,
        0,1044,1049,5,80,0,0,1045,1048,3,38,19,0,1046,1048,3,56,28,0,1047,
        1045,1,0,0,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,
        0,1049,1050,1,0,0,0,1050,1052,1,0,0,0,1051,1049,1,0,0,0,1052,1053,
        5,81,0,0,1053,161,1,0,0,0,1054,1058,5,80,0,0,1055,1057,3,164,82,
        0,1056,1055,1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,
        1,0,0,0,1059,1061,1,0,0,0,1060,1058,1,0,0,0,1061,1062,5,81,0,0,1062,
        163,1,0,0,0,1063,1064,3,166,83,0,1064,1065,5,84,0,0,1065,1070,1,
        0,0,0,1066,1070,3,172,86,0,1067,1070,3,174,87,0,1068,1070,3,258,
        129,0,1069,1063,1,0,0,0,1069,1066,1,0,0,0,1069,1067,1,0,0,0,1069,
        1068,1,0,0,0,1070,165,1,0,0,0,1071,1073,3,14,7,0,1072,1071,1,0,0,
        0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1085,
        1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,61,0,0,1078,1079,3,168,84,
        0,1079,1080,5,87,0,0,1080,1081,3,204,102,0,1081,1086,1,0,0,0,1082,
        1083,3,246,123,0,1083,1084,3,78,39,0,1084,1086,1,0,0,0,1085,1077,
        1,0,0,0,1085,1082,1,0,0,0,1086,167,1,0,0,0,1087,1088,7,4,0,0,1088,
        169,1,0,0,0,1089,1090,7,5,0,0,1090,171,1,0,0,0,1091,1093,3,12,6,
        0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,1095,
        1,0,0,0,1095,1100,1,0,0,0,1096,1094,1,0,0,0,1097,1101,3,16,8,0,1098,
        1101,3,32,16,0,1099,1101,3,152,76,0,1100,1097,1,0,0,0,1100,1098,
        1,0,0,0,1100,1099,1,0,0,0,1101,173,1,0,0,0,1102,1216,3,162,81,0,
        1103,1104,5,2,0,0,1104,1107,3,204,102,0,1105,1106,5,93,0,0,1106,
        1108,3,204,102,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,
        0,0,0,1109,1110,5,84,0,0,1110,1216,1,0,0,0,1111,1112,5,22,0,0,1112,
        1113,3,198,99,0,1113,1116,3,174,87,0,1114,1115,5,15,0,0,1115,1117,
        3,174,87,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1216,1,0,0,0,
        1118,1119,5,21,0,0,1119,1120,5,78,0,0,1120,1121,3,192,96,0,1121,
        1122,5,79,0,0,1122,1123,3,174,87,0,1123,1216,1,0,0,0,1124,1125,5,
        50,0,0,1125,1126,3,198,99,0,1126,1127,3,174,87,0,1127,1216,1,0,0,
        0,1128,1129,5,13,0,0,1129,1130,3,174,87,0,1130,1131,5,50,0,0,1131,
        1132,3,198,99,0,1132,1133,5,84,0,0,1133,1216,1,0,0,0,1134,1135,5,
        47,0,0,1135,1145,3,162,81,0,1136,1138,3,176,88,0,1137,1136,1,0,0,
        0,1138,1139,1,0,0,0,1139,1137,1,0,0,0,1139,1140,1,0,0,0,1140,1142,
        1,0,0,0,1141,1143,3,180,90,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,
        1143,1146,1,0,0,0,1144,1146,3,180,90,0,1145,1137,1,0,0,0,1145,1144,
        1,0,0,0,1146,1216,1,0,0,0,1147,1148,5,47,0,0,1148,1149,3,182,91,
        0,1149,1153,3,162,81,0,1150,1152,3,176,88,0,1151,1150,1,0,0,0,1152,
        1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1157,1,0,0,
        0,1155,1153,1,0,0,0,1156,1158,3,180,90,0,1157,1156,1,0,0,0,1157,
        1158,1,0,0,0,1158,1216,1,0,0,0,1159,1160,5,41,0,0,1160,1161,3,198,
        99,0,1161,1165,5,80,0,0,1162,1164,3,188,94,0,1163,1162,1,0,0,0,1164,
        1167,1,0,0,0,1165,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1171,1,0,0,
        0,1167,1165,1,0,0,0,1168,1170,3,190,95,0,1169,1168,1,0,0,0,1170,
        1173,1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1174,1,0,0,
        0,1173,1171,1,0,0,0,1174,1175,5,81,0,0,1175,1216,1,0,0,0,1176,1177,
        5,42,0,0,1177,1178,3,198,99,0,1178,1179,3,162,81,0,1179,1216,1,0,
        0,0,1180,1182,5,36,0,0,1181,1183,3,204,102,0,1182,1181,1,0,0,0,1182,
        1183,1,0,0,0,1183,1184,1,0,0,0,1184,1216,5,84,0,0,1185,1186,5,44,
        0,0,1186,1187,3,204,102,0,1187,1188,5,84,0,0,1188,1216,1,0,0,0,1189,
        1191,5,4,0,0,1190,1192,3,168,84,0,1191,1190,1,0,0,0,1191,1192,1,
        0,0,0,1192,1193,1,0,0,0,1193,1216,5,84,0,0,1194,1196,5,11,0,0,1195,
        1197,3,168,84,0,1196,1195,1,0,0,0,1196,1197,1,0,0,0,1197,1198,1,
        0,0,0,1198,1216,5,84,0,0,1199,1200,5,62,0,0,1200,1201,3,204,102,
        0,1201,1202,5,84,0,0,1202,1216,1,0,0,0,1203,1216,5,84,0,0,1204,1205,
        3,204,102,0,1205,1206,5,84,0,0,1206,1216,1,0,0,0,1207,1209,3,216,
        108,0,1208,1210,5,84,0,0,1209,1208,1,0,0,0,1209,1210,1,0,0,0,1210,
        1216,1,0,0,0,1211,1212,3,168,84,0,1212,1213,5,93,0,0,1213,1214,3,
        174,87,0,1214,1216,1,0,0,0,1215,1102,1,0,0,0,1215,1103,1,0,0,0,1215,
        1111,1,0,0,0,1215,1118,1,0,0,0,1215,1124,1,0,0,0,1215,1128,1,0,0,
        0,1215,1134,1,0,0,0,1215,1147,1,0,0,0,1215,1159,1,0,0,0,1215,1176,
        1,0,0,0,1215,1180,1,0,0,0,1215,1185,1,0,0,0,1215,1189,1,0,0,0,1215,
        1194,1,0,0,0,1215,1199,1,0,0,0,1215,1203,1,0,0,0,1215,1204,1,0,0,
        0,1215,1207,1,0,0,0,1215,1211,1,0,0,0,1216,175,1,0,0,0,1217,1218,
        5,7,0,0,1218,1222,5,78,0,0,1219,1221,3,14,7,0,1220,1219,1,0,0,0,
        1221,1224,1,0,0,0,1222,1220,1,0,0,0,1222,1223,1,0,0,0,1223,1225,
        1,0,0,0,1224,1222,1,0,0,0,1225,1226,3,178,89,0,1226,1227,3,168,84,
        0,1227,1228,5,79,0,0,1228,1229,3,162,81,0,1229,177,1,0,0,0,1230,
        1235,3,108,54,0,1231,1232,5,107,0,0,1232,1234,3,108,54,0,1233,1231,
        1,0,0,0,1234,1237,1,0,0,0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,
        179,1,0,0,0,1237,1235,1,0,0,0,1238,1239,5,19,0,0,1239,1240,3,162,
        81,0,1240,181,1,0,0,0,1241,1242,5,78,0,0,1242,1244,3,184,92,0,1243,
        1245,5,84,0,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,0,
        0,0,1246,1247,5,79,0,0,1247,183,1,0,0,0,1248,1253,3,186,93,0,1249,
        1250,5,84,0,0,1250,1252,3,186,93,0,1251,1249,1,0,0,0,1252,1255,1,
        0,0,0,1253,1251,1,0,0,0,1253,1254,1,0,0,0,1254,185,1,0,0,0,1255,
        1253,1,0,0,0,1256,1258,3,14,7,0,1257,1256,1,0,0,0,1258,1261,1,0,
        0,0,1259,1257,1,0,0,0,1259,1260,1,0,0,0,1260,1267,1,0,0,0,1261,1259,
        1,0,0,0,1262,1263,3,88,44,0,1263,1264,3,82,41,0,1264,1268,1,0,0,
        0,1265,1266,5,61,0,0,1266,1268,3,168,84,0,1267,1262,1,0,0,0,1267,
        1265,1,0,0,0,1268,1269,1,0,0,0,1269,1270,5,87,0,0,1270,1271,3,204,
        102,0,1271,1274,1,0,0,0,1272,1274,3,108,54,0,1273,1259,1,0,0,0,1273,
        1272,1,0,0,0,1274,187,1,0,0,0,1275,1277,3,190,95,0,1276,1275,1,0,
        0,0,1277,1278,1,0,0,0,1278,1276,1,0,0,0,1278,1279,1,0,0,0,1279,1281,
        1,0,0,0,1280,1282,3,164,82,0,1281,1280,1,0,0,0,1282,1283,1,0,0,0,
        1283,1281,1,0,0,0,1283,1284,1,0,0,0,1284,189,1,0,0,0,1285,1291,5,
        6,0,0,1286,1292,3,204,102,0,1287,1292,5,129,0,0,1288,1289,3,246,
        123,0,1289,1290,3,168,84,0,1290,1292,1,0,0,0,1291,1286,1,0,0,0,1291,
        1287,1,0,0,0,1291,1288,1,0,0,0,1292,1293,1,0,0,0,1293,1297,5,93,
        0,0,1294,1295,5,12,0,0,1295,1297,5,93,0,0,1296,1285,1,0,0,0,1296,
        1294,1,0,0,0,1297,191,1,0,0,0,1298,1311,3,196,98,0,1299,1301,3,194,
        97,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,
        1304,5,84,0,0,1303,1305,3,204,102,0,1304,1303,1,0,0,0,1304,1305,
        1,0,0,0,1305,1306,1,0,0,0,1306,1308,5,84,0,0,1307,1309,3,200,100,
        0,1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,1310,1298,
        1,0,0,0,1310,1300,1,0,0,0,1311,193,1,0,0,0,1312,1315,3,166,83,0,
        1313,1315,3,200,100,0,1314,1312,1,0,0,0,1314,1313,1,0,0,0,1315,195,
        1,0,0,0,1316,1318,3,14,7,0,1317,1316,1,0,0,0,1318,1321,1,0,0,0,1319,
        1317,1,0,0,0,1319,1320,1,0,0,0,1320,1324,1,0,0,0,1321,1319,1,0,0,
        0,1322,1325,3,246,123,0,1323,1325,5,61,0,0,1324,1322,1,0,0,0,1324,
        1323,1,0,0,0,1325,1326,1,0,0,0,1326,1327,3,82,41,0,1327,1328,5,93,
        0,0,1328,1329,3,204,102,0,1329,197,1,0,0,0,1330,1331,5,78,0,0,1331,
        1332,3,204,102,0,1332,1333,5,79,0,0,1333,199,1,0,0,0,1334,1339,3,
        204,102,0,1335,1336,5,85,0,0,1336,1338,3,204,102,0,1337,1335,1,0,
        0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,201,
        1,0,0,0,1341,1339,1,0,0,0,1342,1346,3,168,84,0,1343,1346,5,43,0,
        0,1344,1346,5,40,0,0,1345,1342,1,0,0,0,1345,1343,1,0,0,0,1345,1344,
        1,0,0,0,1346,1347,1,0,0,0,1347,1348,3,256,128,0,1348,203,1,0,0,0,
        1349,1350,6,102,-1,0,1350,1393,3,214,107,0,1351,1393,3,202,101,0,
        1352,1353,3,246,123,0,1353,1359,5,122,0,0,1354,1356,3,250,125,0,
        1355,1354,1,0,0,0,1355,1356,1,0,0,0,1356,1357,1,0,0,0,1357,1360,
        3,168,84,0,1358,1360,5,31,0,0,1359,1355,1,0,0,0,1359,1358,1,0,0,
        0,1360,1393,1,0,0,0,1361,1362,3,224,112,0,1362,1364,5,122,0,0,1363,
        1365,3,250,125,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,
        0,0,0,1366,1367,5,31,0,0,1367,1393,1,0,0,0,1368,1393,3,216,108,0,
        1369,1370,7,6,0,0,1370,1393,3,204,102,17,1371,1375,5,78,0,0,1372,
        1374,3,118,59,0,1373,1372,1,0,0,0,1374,1377,1,0,0,0,1375,1373,1,
        0,0,0,1375,1376,1,0,0,0,1376,1378,1,0,0,0,1377,1375,1,0,0,0,1378,
        1383,3,246,123,0,1379,1380,5,106,0,0,1380,1382,3,246,123,0,1381,
        1379,1,0,0,0,1382,1385,1,0,0,0,1383,1381,1,0,0,0,1383,1384,1,0,0,
        0,1384,1386,1,0,0,0,1385,1383,1,0,0,0,1386,1387,5,79,0,0,1387,1388,
        3,204,102,16,1388,1393,1,0,0,0,1389,1390,5,31,0,0,1390,1393,3,226,
        113,0,1391,1393,3,208,104,0,1392,1349,1,0,0,0,1392,1351,1,0,0,0,
        1392,1352,1,0,0,0,1392,1361,1,0,0,0,1392,1368,1,0,0,0,1392,1369,
        1,0,0,0,1392,1371,1,0,0,0,1392,1389,1,0,0,0,1392,1391,1,0,0,0,1393,
        1477,1,0,0,0,1394,1395,10,14,0,0,1395,1396,7,7,0,0,1396,1476,3,204,
        102,15,1397,1398,10,13,0,0,1398,1399,7,8,0,0,1399,1476,3,204,102,
        14,1400,1408,10,12,0,0,1401,1402,5,89,0,0,1402,1409,5,89,0,0,1403,
        1404,5,88,0,0,1404,1405,5,88,0,0,1405,1409,5,88,0,0,1406,1407,5,
        88,0,0,1407,1409,5,88,0,0,1408,1401,1,0,0,0,1408,1403,1,0,0,0,1408,
        1406,1,0,0,0,1409,1410,1,0,0,0,1410,1476,3,204,102,13,1411,1412,
        10,11,0,0,1412,1413,7,9,0,0,1413,1476,3,204,102,12,1414,1415,10,
        9,0,0,1415,1416,7,10,0,0,1416,1476,3,204,102,10,1417,1418,10,8,0,
        0,1418,1419,5,106,0,0,1419,1476,3,204,102,9,1420,1421,10,7,0,0,1421,
        1422,5,108,0,0,1422,1476,3,204,102,8,1423,1424,10,6,0,0,1424,1425,
        5,107,0,0,1425,1476,3,204,102,7,1426,1427,10,5,0,0,1427,1428,5,98,
        0,0,1428,1476,3,204,102,6,1429,1430,10,4,0,0,1430,1431,5,99,0,0,
        1431,1476,3,204,102,5,1432,1433,10,3,0,0,1433,1434,5,92,0,0,1434,
        1435,3,204,102,0,1435,1436,5,93,0,0,1436,1437,3,204,102,3,1437,1476,
        1,0,0,0,1438,1439,10,2,0,0,1439,1440,7,11,0,0,1440,1476,3,204,102,
        2,1441,1442,10,25,0,0,1442,1443,5,82,0,0,1443,1444,3,204,102,0,1444,
        1445,5,83,0,0,1445,1476,1,0,0,0,1446,1447,10,24,0,0,1447,1459,5,
        86,0,0,1448,1460,3,168,84,0,1449,1460,3,202,101,0,1450,1460,5,43,
        0,0,1451,1453,5,31,0,0,1452,1454,3,242,121,0,1453,1452,1,0,0,0,1453,
        1454,1,0,0,0,1454,1455,1,0,0,0,1455,1460,3,230,115,0,1456,1457,5,
        40,0,0,1457,1460,3,252,126,0,1458,1460,3,236,118,0,1459,1448,1,0,
        0,0,1459,1449,1,0,0,0,1459,1450,1,0,0,0,1459,1451,1,0,0,0,1459,1456,
        1,0,0,0,1459,1458,1,0,0,0,1460,1476,1,0,0,0,1461,1462,10,22,0,0,
        1462,1464,5,122,0,0,1463,1465,3,250,125,0,1464,1463,1,0,0,0,1464,
        1465,1,0,0,0,1465,1466,1,0,0,0,1466,1476,3,168,84,0,1467,1468,10,
        18,0,0,1468,1476,7,12,0,0,1469,1470,10,10,0,0,1470,1473,5,26,0,0,
        1471,1474,3,246,123,0,1472,1474,3,206,103,0,1473,1471,1,0,0,0,1473,
        1472,1,0,0,0,1474,1476,1,0,0,0,1475,1394,1,0,0,0,1475,1397,1,0,0,
        0,1475,1400,1,0,0,0,1475,1411,1,0,0,0,1475,1414,1,0,0,0,1475,1417,
        1,0,0,0,1475,1420,1,0,0,0,1475,1423,1,0,0,0,1475,1426,1,0,0,0,1475,
        1429,1,0,0,0,1475,1432,1,0,0,0,1475,1438,1,0,0,0,1475,1441,1,0,0,
        0,1475,1446,1,0,0,0,1475,1461,1,0,0,0,1475,1467,1,0,0,0,1475,1469,
        1,0,0,0,1476,1479,1,0,0,0,1477,1475,1,0,0,0,1477,1478,1,0,0,0,1478,
        205,1,0,0,0,1479,1477,1,0,0,0,1480,1482,3,14,7,0,1481,1480,1,0,0,
        0,1482,1485,1,0,0,0,1483,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1486,
        1,0,0,0,1485,1483,1,0,0,0,1486,1490,3,246,123,0,1487,1489,3,118,
        59,0,1488,1487,1,0,0,0,1489,1492,1,0,0,0,1490,1488,1,0,0,0,1490,
        1491,1,0,0,0,1491,1493,1,0,0,0,1492,1490,1,0,0,0,1493,1494,3,168,
        84,0,1494,207,1,0,0,0,1495,1496,3,210,105,0,1496,1497,5,121,0,0,
        1497,1498,3,212,106,0,1498,209,1,0,0,0,1499,1522,3,168,84,0,1500,
        1502,5,78,0,0,1501,1503,3,98,49,0,1502,1501,1,0,0,0,1502,1503,1,
        0,0,0,1503,1504,1,0,0,0,1504,1522,5,79,0,0,1505,1506,5,78,0,0,1506,
        1511,3,168,84,0,1507,1508,5,85,0,0,1508,1510,3,168,84,0,1509,1507,
        1,0,0,0,1510,1513,1,0,0,0,1511,1509,1,0,0,0,1511,1512,1,0,0,0,1512,
        1514,1,0,0,0,1513,1511,1,0,0,0,1514,1515,5,79,0,0,1515,1522,1,0,
        0,0,1516,1518,5,78,0,0,1517,1519,3,104,52,0,1518,1517,1,0,0,0,1518,
        1519,1,0,0,0,1519,1520,1,0,0,0,1520,1522,5,79,0,0,1521,1499,1,0,
        0,0,1521,1500,1,0,0,0,1521,1505,1,0,0,0,1521,1516,1,0,0,0,1522,211,
        1,0,0,0,1523,1526,3,204,102,0,1524,1526,3,162,81,0,1525,1523,1,0,
        0,0,1525,1524,1,0,0,0,1526,213,1,0,0,0,1527,1528,5,78,0,0,1528,1529,
        3,204,102,0,1529,1530,5,79,0,0,1530,1546,1,0,0,0,1531,1546,5,43,
        0,0,1532,1546,5,40,0,0,1533,1546,3,110,55,0,1534,1546,3,168,84,0,
        1535,1536,3,48,24,0,1536,1537,5,86,0,0,1537,1538,5,9,0,0,1538,1546,
        1,0,0,0,1539,1543,3,242,121,0,1540,1544,3,254,127,0,1541,1542,5,
        43,0,0,1542,1544,3,256,128,0,1543,1540,1,0,0,0,1543,1541,1,0,0,0,
        1544,1546,1,0,0,0,1545,1527,1,0,0,0,1545,1531,1,0,0,0,1545,1532,
        1,0,0,0,1545,1533,1,0,0,0,1545,1534,1,0,0,0,1545,1535,1,0,0,0,1545,
        1539,1,0,0,0,1546,215,1,0,0,0,1547,1548,5,41,0,0,1548,1549,3,198,
        99,0,1549,1553,5,80,0,0,1550,1552,3,218,109,0,1551,1550,1,0,0,0,
        1552,1555,1,0,0,0,1553,1551,1,0,0,0,1553,1554,1,0,0,0,1554,1556,
        1,0,0,0,1555,1553,1,0,0,0,1556,1557,5,81,0,0,1557,217,1,0,0,0,1558,
        1562,5,6,0,0,1559,1563,3,200,100,0,1560,1563,5,77,0,0,1561,1563,
        3,220,110,0,1562,1559,1,0,0,0,1562,1560,1,0,0,0,1562,1561,1,0,0,
        0,1563,1564,1,0,0,0,1564,1565,7,13,0,0,1565,1570,3,222,111,0,1566,
        1567,5,12,0,0,1567,1568,7,13,0,0,1568,1570,3,222,111,0,1569,1558,
        1,0,0,0,1569,1566,1,0,0,0,1570,219,1,0,0,0,1571,1572,6,110,-1,0,
        1572,1573,5,78,0,0,1573,1574,3,220,110,0,1574,1575,5,79,0,0,1575,
        1598,1,0,0,0,1576,1578,3,14,7,0,1577,1576,1,0,0,0,1578,1581,1,0,
        0,0,1579,1577,1,0,0,0,1579,1580,1,0,0,0,1580,1582,1,0,0,0,1581,1579,
        1,0,0,0,1582,1586,3,246,123,0,1583,1585,3,118,59,0,1584,1583,1,0,
        0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,1589,
        1,0,0,0,1588,1586,1,0,0,0,1589,1594,3,168,84,0,1590,1591,5,98,0,
        0,1591,1593,3,204,102,0,1592,1590,1,0,0,0,1593,1596,1,0,0,0,1594,
        1592,1,0,0,0,1594,1595,1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,
        0,1597,1571,1,0,0,0,1597,1579,1,0,0,0,1598,1604,1,0,0,0,1599,1600,
        10,1,0,0,1600,1601,5,98,0,0,1601,1603,3,204,102,0,1602,1599,1,0,
        0,0,1603,1606,1,0,0,0,1604,1602,1,0,0,0,1604,1605,1,0,0,0,1605,221,
        1,0,0,0,1606,1604,1,0,0,0,1607,1615,3,162,81,0,1608,1610,3,164,82,
        0,1609,1608,1,0,0,0,1610,1613,1,0,0,0,1611,1609,1,0,0,0,1611,1612,
        1,0,0,0,1612,1615,1,0,0,0,1613,1611,1,0,0,0,1614,1607,1,0,0,0,1614,
        1611,1,0,0,0,1615,223,1,0,0,0,1616,1617,3,88,44,0,1617,1618,5,86,
        0,0,1618,1620,1,0,0,0,1619,1616,1,0,0,0,1619,1620,1,0,0,0,1620,1624,
        1,0,0,0,1621,1623,3,118,59,0,1622,1621,1,0,0,0,1623,1626,1,0,0,0,
        1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1624,
        1,0,0,0,1627,1629,3,168,84,0,1628,1630,3,250,125,0,1629,1628,1,0,
        0,0,1629,1630,1,0,0,0,1630,225,1,0,0,0,1631,1633,3,242,121,0,1632,
        1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1635,3,228,
        114,0,1635,1636,3,234,117,0,1636,1641,1,0,0,0,1637,1638,3,228,114,
        0,1638,1639,3,232,116,0,1639,1641,1,0,0,0,1640,1632,1,0,0,0,1640,
        1637,1,0,0,0,1641,227,1,0,0,0,1642,1644,3,168,84,0,1643,1645,3,238,
        119,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,1645,1653,1,0,0,0,1646,
        1647,5,86,0,0,1647,1649,3,168,84,0,1648,1650,3,238,119,0,1649,1648,
        1,0,0,0,1649,1650,1,0,0,0,1650,1652,1,0,0,0,1651,1646,1,0,0,0,1652,
        1655,1,0,0,0,1653,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1658,1,0,0,
        0,1655,1653,1,0,0,0,1656,1658,3,248,124,0,1657,1642,1,0,0,0,1657,
        1656,1,0,0,0,1658,229,1,0,0,0,1659,1661,3,168,84,0,1660,1662,3,240,
        120,0,1661,1660,1,0,0,0,1661,1662,1,0,0,0,1662,1663,1,0,0,0,1663,
        1664,3,234,117,0,1664,231,1,0,0,0,1665,1666,5,82,0,0,1666,1668,5,
        83,0,0,1667,1665,1,0,0,0,1668,1669,1,0,0,0,1669,1667,1,0,0,0,1669,
        1670,1,0,0,0,1670,1671,1,0,0,0,1671,1688,3,86,43,0,1672,1673,5,82,
        0,0,1673,1674,3,204,102,0,1674,1675,5,83,0,0,1675,1677,1,0,0,0,1676,
        1672,1,0,0,0,1677,1678,1,0,0,0,1678,1676,1,0,0,0,1678,1679,1,0,0,
        0,1679,1684,1,0,0,0,1680,1681,5,82,0,0,1681,1683,5,83,0,0,1682,1680,
        1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,
        1688,1,0,0,0,1686,1684,1,0,0,0,1687,1667,1,0,0,0,1687,1676,1,0,0,
        0,1688,233,1,0,0,0,1689,1691,3,256,128,0,1690,1692,3,34,17,0,1691,
        1690,1,0,0,0,1691,1692,1,0,0,0,1692,235,1,0,0,0,1693,1694,3,242,
        121,0,1694,1695,3,254,127,0,1695,237,1,0,0,0,1696,1697,5,89,0,0,
        1697,1700,5,88,0,0,1698,1700,3,250,125,0,1699,1696,1,0,0,0,1699,
        1698,1,0,0,0,1700,239,1,0,0,0,1701,1702,5,89,0,0,1702,1705,5,88,
        0,0,1703,1705,3,242,121,0,1704,1701,1,0,0,0,1704,1703,1,0,0,0,1705,
        241,1,0,0,0,1706,1707,5,89,0,0,1707,1708,3,244,122,0,1708,1709,5,
        88,0,0,1709,243,1,0,0,0,1710,1715,3,246,123,0,1711,1712,5,85,0,0,
        1712,1714,3,246,123,0,1713,1711,1,0,0,0,1714,1717,1,0,0,0,1715,1713,
        1,0,0,0,1715,1716,1,0,0,0,1716,245,1,0,0,0,1717,1715,1,0,0,0,1718,
        1720,3,118,59,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,
        0,0,0,1721,1722,1,0,0,0,1722,1726,1,0,0,0,1723,1721,1,0,0,0,1724,
        1727,3,88,44,0,1725,1727,3,248,124,0,1726,1724,1,0,0,0,1726,1725,
        1,0,0,0,1727,1738,1,0,0,0,1728,1730,3,118,59,0,1729,1728,1,0,0,0,
        1730,1733,1,0,0,0,1731,1729,1,0,0,0,1731,1732,1,0,0,0,1732,1734,
        1,0,0,0,1733,1731,1,0,0,0,1734,1735,5,82,0,0,1735,1737,5,83,0,0,
        1736,1731,1,0,0,0,1737,1740,1,0,0,0,1738,1736,1,0,0,0,1738,1739,
        1,0,0,0,1739,247,1,0,0,0,1740,1738,1,0,0,0,1741,1742,7,14,0,0,1742,
        249,1,0,0,0,1743,1744,5,89,0,0,1744,1749,3,90,45,0,1745,1746,5,85,
        0,0,1746,1748,3,90,45,0,1747,1745,1,0,0,0,1748,1751,1,0,0,0,1749,
        1747,1,0,0,0,1749,1750,1,0,0,0,1750,1752,1,0,0,0,1751,1749,1,0,0,
        0,1752,1753,5,88,0,0,1753,251,1,0,0,0,1754,1764,3,256,128,0,1755,
        1757,5,86,0,0,1756,1758,3,250,125,0,1757,1756,1,0,0,0,1757,1758,
        1,0,0,0,1758,1759,1,0,0,0,1759,1761,3,168,84,0,1760,1762,3,256,128,
        0,1761,1760,1,0,0,0,1761,1762,1,0,0,0,1762,1764,1,0,0,0,1763,1754,
        1,0,0,0,1763,1755,1,0,0,0,1764,253,1,0,0,0,1765,1766,5,40,0,0,1766,
        1771,3,252,126,0,1767,1768,3,168,84,0,1768,1769,3,256,128,0,1769,
        1771,1,0,0,0,1770,1765,1,0,0,0,1770,1767,1,0,0,0,1771,255,1,0,0,
        0,1772,1774,5,78,0,0,1773,1775,3,200,100,0,1774,1773,1,0,0,0,1774,
        1775,1,0,0,0,1775,1776,1,0,0,0,1776,1777,5,79,0,0,1777,257,1,0,0,
        0,1778,1779,5,126,0,0,1779,259,1,0,0,0,222,261,265,267,272,274,280,
        285,294,299,304,311,319,326,338,342,347,351,355,359,369,377,385,
        389,396,403,407,410,413,422,428,433,436,442,448,452,456,464,473,
        480,484,487,492,507,516,521,527,531,543,550,562,565,570,583,591,
        601,610,621,626,635,645,650,659,665,672,677,685,689,691,697,703,
        708,714,720,722,729,734,739,742,744,754,764,769,772,777,786,793,
        804,810,821,831,842,851,856,859,866,876,884,887,890,903,911,916,
        924,928,932,936,940,942,946,952,960,970,979,989,997,1011,1018,1023,
        1029,1038,1047,1049,1058,1069,1074,1085,1094,1100,1107,1116,1139,
        1142,1145,1153,1157,1165,1171,1182,1191,1196,1209,1215,1222,1235,
        1244,1253,1259,1267,1273,1278,1283,1291,1296,1300,1304,1308,1310,
        1314,1319,1324,1339,1345,1355,1359,1364,1375,1383,1392,1408,1453,
        1459,1464,1473,1475,1477,1483,1490,1502,1511,1518,1521,1525,1543,
        1545,1553,1562,1569,1579,1586,1594,1597,1604,1611,1614,1619,1624,
        1629,1632,1640,1644,1649,1653,1657,1661,1669,1678,1684,1687,1691,
        1699,1704,1715,1721,1726,1731,1738,1749,1757,1761,1763,1770,1774
    ]

class JavaParser ( Parser ):

    grammarFileName = "JavaParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "'module'", "'open'", "'requires'", "'exports'", "'opens'", 
                     "'to'", "'uses'", "'provides'", "'with'", "'transitive'", 
                     "'var'", "'yield'", "'record'", "'sealed'", "'permits'", 
                     "'non-sealed'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'null'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", 
                     "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
                     "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", 
                     "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "'->'", "'::'", 
                     "'@'", "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "MODULE", "OPEN", "REQUIRES", "EXPORTS", 
                      "OPENS", "TO", "USES", "PROVIDES", "WITH", "TRANSITIVE", 
                      "VAR", "YIELD", "RECORD", "SEALED", "PERMITS", "NON_SEALED", 
                      "DECIMAL_LITERAL", "HEX_LITERAL", "OCT_LITERAL", "BINARY_LITERAL", 
                      "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", "BOOL_LITERAL", 
                      "CHAR_LITERAL", "STRING_LITERAL", "TEXT_BLOCK", "NULL_LITERAL", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", "GT", 
                      "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
                      "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", 
                      "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", "CARET", 
                      "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", 
                      "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", 
                      "ARROW", "COLONCOLON", "AT", "ELLIPSIS", "WS", "JAVADOC_COMMENT", 
                      "COMMENT", "LINE_COMMENT", "IDENTIFIER" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_typeDeclarationWithJavaDoc = 3
    RULE_typeDeclaration = 4
    RULE_modifier = 5
    RULE_classOrInterfaceModifier = 6
    RULE_variableModifier = 7
    RULE_classDeclaration = 8
    RULE_typeParameters = 9
    RULE_typeParameter = 10
    RULE_typeBound = 11
    RULE_enumDeclaration = 12
    RULE_enumConstants = 13
    RULE_enumConstant = 14
    RULE_enumBodyDeclarations = 15
    RULE_interfaceDeclaration = 16
    RULE_classBody = 17
    RULE_interfaceBody = 18
    RULE_classBodyDeclaration = 19
    RULE_memberDeclarationWithJavaDoc = 20
    RULE_memberDeclaration = 21
    RULE_methodDeclaration = 22
    RULE_methodBody = 23
    RULE_typeTypeOrVoid = 24
    RULE_genericMethodDeclaration = 25
    RULE_genericConstructorDeclaration = 26
    RULE_constructorDeclaration = 27
    RULE_compactConstructorDeclaration = 28
    RULE_fieldDeclaration = 29
    RULE_interfaceBodyDeclaration = 30
    RULE_interfaceMemberDeclarationWithJavaDoc = 31
    RULE_interfaceMemberDeclaration = 32
    RULE_constDeclaration = 33
    RULE_constantDeclarator = 34
    RULE_interfaceMethodDeclaration = 35
    RULE_interfaceMethodModifier = 36
    RULE_genericInterfaceMethodDeclaration = 37
    RULE_interfaceCommonBodyDeclaration = 38
    RULE_variableDeclarators = 39
    RULE_variableDeclarator = 40
    RULE_variableDeclaratorId = 41
    RULE_variableInitializer = 42
    RULE_arrayInitializer = 43
    RULE_classOrInterfaceType = 44
    RULE_typeArgument = 45
    RULE_qualifiedNameList = 46
    RULE_formalParameters = 47
    RULE_receiverParameter = 48
    RULE_formalParameterList = 49
    RULE_formalParameter = 50
    RULE_lastFormalParameter = 51
    RULE_lambdaLVTIList = 52
    RULE_lambdaLVTIParameter = 53
    RULE_qualifiedName = 54
    RULE_literal = 55
    RULE_integerLiteral = 56
    RULE_floatLiteral = 57
    RULE_altAnnotationQualifiedName = 58
    RULE_annotation = 59
    RULE_elementValuePairs = 60
    RULE_elementValuePair = 61
    RULE_elementValue = 62
    RULE_elementValueArrayInitializer = 63
    RULE_annotationTypeDeclaration = 64
    RULE_annotationTypeBody = 65
    RULE_annotationTypeElementDeclaration = 66
    RULE_annotationTypeElementRest = 67
    RULE_annotationMethodOrConstantRest = 68
    RULE_annotationMethodRest = 69
    RULE_annotationConstantRest = 70
    RULE_defaultValue = 71
    RULE_moduleDeclaration = 72
    RULE_moduleBody = 73
    RULE_moduleDirective = 74
    RULE_requiresModifier = 75
    RULE_recordDeclaration = 76
    RULE_recordHeader = 77
    RULE_recordComponentList = 78
    RULE_recordComponent = 79
    RULE_recordBody = 80
    RULE_block = 81
    RULE_blockStatement = 82
    RULE_localVariableDeclaration = 83
    RULE_identifier = 84
    RULE_typeIdentifier = 85
    RULE_localTypeDeclaration = 86
    RULE_statement = 87
    RULE_catchClause = 88
    RULE_catchType = 89
    RULE_finallyBlock = 90
    RULE_resourceSpecification = 91
    RULE_resources = 92
    RULE_resource = 93
    RULE_switchBlockStatementGroup = 94
    RULE_switchLabel = 95
    RULE_forControl = 96
    RULE_forInit = 97
    RULE_enhancedForControl = 98
    RULE_parExpression = 99
    RULE_expressionList = 100
    RULE_methodCall = 101
    RULE_expression = 102
    RULE_pattern = 103
    RULE_lambdaExpression = 104
    RULE_lambdaParameters = 105
    RULE_lambdaBody = 106
    RULE_primary = 107
    RULE_switchExpression = 108
    RULE_switchLabeledRule = 109
    RULE_guardedPattern = 110
    RULE_switchRuleOutcome = 111
    RULE_classType = 112
    RULE_creator = 113
    RULE_createdName = 114
    RULE_innerCreator = 115
    RULE_arrayCreatorRest = 116
    RULE_classCreatorRest = 117
    RULE_explicitGenericInvocation = 118
    RULE_typeArgumentsOrDiamond = 119
    RULE_nonWildcardTypeArgumentsOrDiamond = 120
    RULE_nonWildcardTypeArguments = 121
    RULE_typeList = 122
    RULE_typeType = 123
    RULE_primitiveType = 124
    RULE_typeArguments = 125
    RULE_superSuffix = 126
    RULE_explicitGenericInvocationSuffix = 127
    RULE_arguments = 128
    RULE_javadoc = 129

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "typeDeclarationWithJavaDoc", "typeDeclaration", "modifier", 
                   "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
                   "typeParameters", "typeParameter", "typeBound", "enumDeclaration", 
                   "enumConstants", "enumConstant", "enumBodyDeclarations", 
                   "interfaceDeclaration", "classBody", "interfaceBody", 
                   "classBodyDeclaration", "memberDeclarationWithJavaDoc", 
                   "memberDeclaration", "methodDeclaration", "methodBody", 
                   "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
                   "constructorDeclaration", "compactConstructorDeclaration", 
                   "fieldDeclaration", "interfaceBodyDeclaration", "interfaceMemberDeclarationWithJavaDoc", 
                   "interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
                   "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "genericInterfaceMethodDeclaration", "interfaceCommonBodyDeclaration", 
                   "variableDeclarators", "variableDeclarator", "variableDeclaratorId", 
                   "variableInitializer", "arrayInitializer", "classOrInterfaceType", 
                   "typeArgument", "qualifiedNameList", "formalParameters", 
                   "receiverParameter", "formalParameterList", "formalParameter", 
                   "lastFormalParameter", "lambdaLVTIList", "lambdaLVTIParameter", 
                   "qualifiedName", "literal", "integerLiteral", "floatLiteral", 
                   "altAnnotationQualifiedName", "annotation", "elementValuePairs", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
                   "annotationTypeElementRest", "annotationMethodOrConstantRest", 
                   "annotationMethodRest", "annotationConstantRest", "defaultValue", 
                   "moduleDeclaration", "moduleBody", "moduleDirective", 
                   "requiresModifier", "recordDeclaration", "recordHeader", 
                   "recordComponentList", "recordComponent", "recordBody", 
                   "block", "blockStatement", "localVariableDeclaration", 
                   "identifier", "typeIdentifier", "localTypeDeclaration", 
                   "statement", "catchClause", "catchType", "finallyBlock", 
                   "resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
                   "switchLabel", "forControl", "forInit", "enhancedForControl", 
                   "parExpression", "expressionList", "methodCall", "expression", 
                   "pattern", "lambdaExpression", "lambdaParameters", "lambdaBody", 
                   "primary", "switchExpression", "switchLabeledRule", "guardedPattern", 
                   "switchRuleOutcome", "classType", "creator", "createdName", 
                   "innerCreator", "arrayCreatorRest", "classCreatorRest", 
                   "explicitGenericInvocation", "typeArgumentsOrDiamond", 
                   "nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", 
                   "typeList", "typeType", "primitiveType", "typeArguments", 
                   "superSuffix", "explicitGenericInvocationSuffix", "arguments", 
                   "javadoc" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    MODULE=51
    OPEN=52
    REQUIRES=53
    EXPORTS=54
    OPENS=55
    TO=56
    USES=57
    PROVIDES=58
    WITH=59
    TRANSITIVE=60
    VAR=61
    YIELD=62
    RECORD=63
    SEALED=64
    PERMITS=65
    NON_SEALED=66
    DECIMAL_LITERAL=67
    HEX_LITERAL=68
    OCT_LITERAL=69
    BINARY_LITERAL=70
    FLOAT_LITERAL=71
    HEX_FLOAT_LITERAL=72
    BOOL_LITERAL=73
    CHAR_LITERAL=74
    STRING_LITERAL=75
    TEXT_BLOCK=76
    NULL_LITERAL=77
    LPAREN=78
    RPAREN=79
    LBRACE=80
    RBRACE=81
    LBRACK=82
    RBRACK=83
    SEMI=84
    COMMA=85
    DOT=86
    ASSIGN=87
    GT=88
    LT=89
    BANG=90
    TILDE=91
    QUESTION=92
    COLON=93
    EQUAL=94
    LE=95
    GE=96
    NOTEQUAL=97
    AND=98
    OR=99
    INC=100
    DEC=101
    ADD=102
    SUB=103
    MUL=104
    DIV=105
    BITAND=106
    BITOR=107
    CARET=108
    MOD=109
    ADD_ASSIGN=110
    SUB_ASSIGN=111
    MUL_ASSIGN=112
    DIV_ASSIGN=113
    AND_ASSIGN=114
    OR_ASSIGN=115
    XOR_ASSIGN=116
    MOD_ASSIGN=117
    LSHIFT_ASSIGN=118
    RSHIFT_ASSIGN=119
    URSHIFT_ASSIGN=120
    ARROW=121
    COLONCOLON=122
    AT=123
    ELLIPSIS=124
    WS=125
    JAVADOC_COMMENT=126
    COMMENT=127
    LINE_COMMENT=128
    IDENTIFIER=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageDeclaration(self):
            return self.getTypedRuleContext(JavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ImportDeclarationContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def typeDeclarationWithJavaDoc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeDeclarationWithJavaDocContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeDeclarationWithJavaDocContext,i)


        def moduleDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ModuleDeclarationContext,0)


        def EOF(self):
            return self.getToken(JavaParser.EOF, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = JavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 260
                    self.packageDeclaration()


                self.state = 267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 265
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [25]:
                            self.state = 263
                            self.importDeclaration()
                            pass
                        elif token in [84]:
                            self.state = 264
                            self.match(JavaParser.SEMI)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2250914781658622) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188146770731859975) != 0) or _la==129:
                    self.state = 272
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1, 9, 16, 18, 28, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 126, 129]:
                        self.state = 270
                        self.typeDeclarationWithJavaDoc()
                        pass
                    elif token in [84]:
                        self.state = 271
                        self.match(JavaParser.SEMI)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.moduleDeclaration()
                self.state = 278
                self.match(JavaParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(JavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = JavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 282
                self.annotation()
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 288
            self.match(JavaParser.PACKAGE)
            self.state = 289
            self.qualifiedName()
            self.state = 290
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(JavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = JavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(JavaParser.IMPORT)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 293
                self.match(JavaParser.STATIC)


            self.state = 296
            self.qualifiedName()
            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 297
                self.match(JavaParser.DOT)
                self.state = 298
                self.match(JavaParser.MUL)


            self.state = 301
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationWithJavaDocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.TypeDeclarationContext,0)


        def javadoc(self):
            return self.getTypedRuleContext(JavaParser.JavadocContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclarationWithJavaDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclarationWithJavaDoc" ):
                listener.enterTypeDeclarationWithJavaDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclarationWithJavaDoc" ):
                listener.exitTypeDeclarationWithJavaDoc(self)




    def typeDeclarationWithJavaDoc(self):

        localctx = JavaParser.TypeDeclarationWithJavaDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_typeDeclarationWithJavaDoc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 303
                self.javadoc()


            self.state = 306
            self.typeDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = JavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 308
                    self.classOrInterfaceModifier() 
                self.state = 313
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 314
                self.classDeclaration()
                pass
            elif token in [16]:
                self.state = 315
                self.enumDeclaration()
                pass
            elif token in [28]:
                self.state = 316
                self.interfaceDeclaration()
                pass
            elif token in [123]:
                self.state = 317
                self.annotationTypeDeclaration()
                pass
            elif token in [63]:
                self.state = 318
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceModifier(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,0)


        def NATIVE(self):
            return self.getToken(JavaParser.NATIVE, 0)

        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def TRANSIENT(self):
            return self.getToken(JavaParser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(JavaParser.VOLATILE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = JavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_modifier)
        try:
            self.state = 326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 18, 33, 34, 35, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.classOrInterfaceModifier()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(JavaParser.NATIVE)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(JavaParser.SYNCHRONIZED)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 4)
                self.state = 324
                self.match(JavaParser.TRANSIENT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 5)
                self.state = 325
                self.match(JavaParser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(JavaParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(JavaParser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def NON_SEALED(self):
            return self.getToken(JavaParser.NON_SEALED, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceModifier" ):
                listener.enterClassOrInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceModifier" ):
                listener.exitClassOrInterfaceModifier(self)




    def classOrInterfaceModifier(self):

        localctx = JavaParser.ClassOrInterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classOrInterfaceModifier)
        try:
            self.state = 338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.annotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.match(JavaParser.PUBLIC)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.match(JavaParser.PROTECTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.match(JavaParser.PRIVATE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 332
                self.match(JavaParser.STATIC)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 333
                self.match(JavaParser.ABSTRACT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 334
                self.match(JavaParser.FINAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 335
                self.match(JavaParser.STRICTFP)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 336
                self.match(JavaParser.SEALED)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 337
                self.match(JavaParser.NON_SEALED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINAL(self):
            return self.getToken(JavaParser.FINAL, 0)

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = JavaParser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_variableModifier)
        try:
            self.state = 342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(JavaParser.FINAL)
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.annotation()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = JavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(JavaParser.CLASS)
            self.state = 345
            self.identifier()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 346
                self.typeParameters()


            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 349
                self.match(JavaParser.EXTENDS)
                self.state = 350
                self.typeType()


            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 353
                self.match(JavaParser.IMPLEMENTS)
                self.state = 354
                self.typeList()


            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 357
                self.match(JavaParser.PERMITS)
                self.state = 358
                self.typeList()


            self.state = 361
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = JavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(JavaParser.LT)
            self.state = 364
            self.typeParameter()
            self.state = 369
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 365
                self.match(JavaParser.COMMA)
                self.state = 366
                self.typeParameter()
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 372
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeBound(self):
            return self.getTypedRuleContext(JavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = JavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 374
                    self.annotation() 
                self.state = 379
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

            self.state = 380
            self.identifier()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 381
                self.match(JavaParser.EXTENDS)
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 382
                        self.annotation() 
                    self.state = 387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 388
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = JavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 391
            self.typeType()
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==106:
                self.state = 392
                self.match(JavaParser.BITAND)
                self.state = 393
                self.typeType()
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(JavaParser.ENUM, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def enumConstants(self):
            return self.getTypedRuleContext(JavaParser.EnumConstantsContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(JavaParser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = JavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(JavaParser.ENUM)
            self.state = 400
            self.identifier()
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 401
                self.match(JavaParser.IMPLEMENTS)
                self.state = 402
                self.typeList()


            self.state = 405
            self.match(JavaParser.LBRACE)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 406
                self.enumConstants()


            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 409
                self.match(JavaParser.COMMA)


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 412
                self.enumBodyDeclarations()


            self.state = 415
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(JavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_enumConstants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstants" ):
                listener.enterEnumConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstants" ):
                listener.exitEnumConstants(self)




    def enumConstants(self):

        localctx = JavaParser.EnumConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumConstants)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.enumConstant()
            self.state = 422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 418
                    self.match(JavaParser.COMMA)
                    self.state = 419
                    self.enumConstant() 
                self.state = 424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = JavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 425
                    self.annotation() 
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

            self.state = 431
            self.identifier()
            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 432
                self.arguments()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 435
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = JavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(JavaParser.SEMI)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188146770765479943) != 0) or _la==129:
                self.state = 439
                self.classBodyDeclaration()
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def interfaceBody(self):
            return self.getTypedRuleContext(JavaParser.InterfaceBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def typeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeListContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeListContext,i)


        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = JavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(JavaParser.INTERFACE)
            self.state = 446
            self.identifier()
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 447
                self.typeParameters()


            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 450
                self.match(JavaParser.EXTENDS)
                self.state = 451
                self.typeList()


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 454
                self.match(JavaParser.PERMITS)
                self.state = 455
                self.typeList()


            self.state = 458
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = JavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(JavaParser.LBRACE)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188146770765479943) != 0) or _la==129:
                self.state = 461
                self.classBodyDeclaration()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def interfaceBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceBodyDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = JavaParser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(JavaParser.LBRACE)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875984598) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188146770765414407) != 0) or _la==129:
                self.state = 470
                self.interfaceBodyDeclaration()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def memberDeclarationWithJavaDoc(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationWithJavaDocContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = JavaParser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 478
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 479
                    self.match(JavaParser.STATIC)


                self.state = 482
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 483
                self.memberDeclarationWithJavaDoc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationWithJavaDocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MemberDeclarationContext,0)


        def javadoc(self):
            return self.getTypedRuleContext(JavaParser.JavadocContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclarationWithJavaDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclarationWithJavaDoc" ):
                listener.enterMemberDeclarationWithJavaDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclarationWithJavaDoc" ):
                listener.exitMemberDeclarationWithJavaDoc(self)




    def memberDeclarationWithJavaDoc(self):

        localctx = JavaParser.MemberDeclarationWithJavaDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memberDeclarationWithJavaDoc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 486
                self.javadoc()


            self.state = 492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 489
                    self.modifier() 
                self.state = 494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 495
            self.memberDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def genericMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericMethodDeclarationContext,0)


        def fieldDeclaration(self):
            return self.getTypedRuleContext(JavaParser.FieldDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def genericConstructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericConstructorDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = JavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_memberDeclaration)
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 499
                self.genericMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 500
                self.fieldDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 501
                self.constructorDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 502
                self.genericConstructorDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 503
                self.interfaceDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 504
                self.annotationTypeDeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 505
                self.classDeclaration()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 506
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = JavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.typeTypeOrVoid()
            self.state = 510
            self.identifier()
            self.state = 511
            self.formalParameters()
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 512
                self.match(JavaParser.LBRACK)
                self.state = 513
                self.match(JavaParser.RBRACK)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 519
                self.match(JavaParser.THROWS)
                self.state = 520
                self.qualifiedNameList()


            self.state = 523
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = JavaParser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_methodBody)
        try:
            self.state = 527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.block()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeOrVoidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VOID(self):
            return self.getToken(JavaParser.VOID, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeTypeOrVoid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTypeOrVoid" ):
                listener.enterTypeTypeOrVoid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTypeOrVoid" ):
                listener.exitTypeTypeOrVoid(self)




    def typeTypeOrVoid(self):

        localctx = JavaParser.TypeTypeOrVoidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_typeTypeOrVoid)
        try:
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.typeType()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.match(JavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.MethodDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericMethodDeclaration" ):
                listener.enterGenericMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericMethodDeclaration" ):
                listener.exitGenericMethodDeclaration(self)




    def genericMethodDeclaration(self):

        localctx = JavaParser.GenericMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_genericMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.typeParameters()
            self.state = 534
            self.methodDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_genericConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericConstructorDeclaration" ):
                listener.enterGenericConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericConstructorDeclaration" ):
                listener.exitGenericConstructorDeclaration(self)




    def genericConstructorDeclaration(self):

        localctx = JavaParser.GenericConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_genericConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.typeParameters()
            self.state = 537
            self.constructorDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = JavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.identifier()
            self.state = 540
            self.formalParameters()
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 541
                self.match(JavaParser.THROWS)
                self.state = 542
                self.qualifiedNameList()


            self.state = 545
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constructorBody = None # BlockContext

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_compactConstructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactConstructorDeclaration" ):
                listener.enterCompactConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactConstructorDeclaration" ):
                listener.exitCompactConstructorDeclaration(self)




    def compactConstructorDeclaration(self):

        localctx = JavaParser.CompactConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_compactConstructorDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 547
                    self.modifier() 
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 553
            self.identifier()
            self.state = 554
            localctx.constructorBody = self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = JavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fieldDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.typeType()
            self.state = 557
            self.variableDeclarators()
            self.state = 558
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclarationWithJavaDoc(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationWithJavaDocContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBodyDeclaration" ):
                listener.enterInterfaceBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBodyDeclaration" ):
                listener.exitInterfaceBodyDeclaration(self)




    def interfaceBodyDeclaration(self):

        localctx = JavaParser.InterfaceBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_interfaceBodyDeclaration)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 12, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 89, 123, 126, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.interfaceMemberDeclarationWithJavaDoc()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationWithJavaDocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceMemberDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMemberDeclarationContext,0)


        def javadoc(self):
            return self.getTypedRuleContext(JavaParser.JavadocContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclarationWithJavaDoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclarationWithJavaDoc" ):
                listener.enterInterfaceMemberDeclarationWithJavaDoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclarationWithJavaDoc" ):
                listener.exitInterfaceMemberDeclarationWithJavaDoc(self)




    def interfaceMemberDeclarationWithJavaDoc(self):

        localctx = JavaParser.InterfaceMemberDeclarationWithJavaDocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_interfaceMemberDeclarationWithJavaDoc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==126:
                self.state = 564
                self.javadoc()


            self.state = 570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 567
                    self.modifier() 
                self.state = 572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 573
            self.interfaceMemberDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def constDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ConstDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceMethodDeclarationContext,0)


        def genericInterfaceMethodDeclaration(self):
            return self.getTypedRuleContext(JavaParser.GenericInterfaceMethodDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = JavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                self.recordDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.constDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 577
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.genericInterfaceMethodDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 579
                self.interfaceDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 580
                self.annotationTypeDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 581
                self.classDeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 582
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def constantDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ConstantDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.ConstantDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstDeclaration" ):
                listener.enterConstDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstDeclaration" ):
                listener.exitConstDeclaration(self)




    def constDeclaration(self):

        localctx = JavaParser.ConstDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_constDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.typeType()
            self.state = 586
            self.constantDeclarator()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 587
                self.match(JavaParser.COMMA)
                self.state = 588
                self.constantDeclarator()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self.match(JavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_constantDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclarator" ):
                listener.enterConstantDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclarator" ):
                listener.exitConstantDeclarator(self)




    def constantDeclarator(self):

        localctx = JavaParser.ConstantDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_constantDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.identifier()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 597
                self.match(JavaParser.LBRACK)
                self.state = 598
                self.match(JavaParser.RBRACK)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 604
            self.match(JavaParser.ASSIGN)
            self.state = 605
            self.variableInitializer()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = JavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_interfaceMethodDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 607
                    self.interfaceMethodModifier() 
                self.state = 612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 613
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(JavaParser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(JavaParser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(JavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = JavaParser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_interfaceMethodModifier)
        try:
            self.state = 621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 615
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(JavaParser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                self.match(JavaParser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 618
                self.match(JavaParser.DEFAULT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 619
                self.match(JavaParser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 620
                self.match(JavaParser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericInterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def interfaceCommonBodyDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceCommonBodyDeclarationContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_genericInterfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericInterfaceMethodDeclaration" ):
                listener.enterGenericInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericInterfaceMethodDeclaration" ):
                listener.exitGenericInterfaceMethodDeclaration(self)




    def genericInterfaceMethodDeclaration(self):

        localctx = JavaParser.GenericInterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_genericInterfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -2250940820221950) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752303423491) != 0) or _la==129:
                self.state = 623
                self.interfaceMethodModifier()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 629
            self.typeParameters()
            self.state = 630
            self.interfaceCommonBodyDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceCommonBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(JavaParser.FormalParametersContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(JavaParser.MethodBodyContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def THROWS(self):
            return self.getToken(JavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_interfaceCommonBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceCommonBodyDeclaration" ):
                listener.enterInterfaceCommonBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceCommonBodyDeclaration" ):
                listener.exitInterfaceCommonBodyDeclaration(self)




    def interfaceCommonBodyDeclaration(self):

        localctx = JavaParser.InterfaceCommonBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_interfaceCommonBodyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 632
                    self.annotation() 
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

            self.state = 638
            self.typeTypeOrVoid()
            self.state = 639
            self.identifier()
            self.state = 640
            self.formalParameters()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 641
                self.match(JavaParser.LBRACK)
                self.state = 642
                self.match(JavaParser.RBRACK)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 648
                self.match(JavaParser.THROWS)
                self.state = 649
                self.qualifiedNameList()


            self.state = 652
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarators" ):
                listener.enterVariableDeclarators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarators" ):
                listener.exitVariableDeclarators(self)




    def variableDeclarators(self):

        localctx = JavaParser.VariableDeclaratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_variableDeclarators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.variableDeclarator()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 655
                self.match(JavaParser.COMMA)
                self.state = 656
                self.variableDeclarator()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(JavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = JavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.variableDeclaratorId()
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 663
                self.match(JavaParser.ASSIGN)
                self.state = 664
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = JavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.identifier()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==82:
                self.state = 668
                self.match(JavaParser.LBRACK)
                self.state = 669
                self.match(JavaParser.RBRACK)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = JavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_variableInitializer)
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80]:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.arrayInitializer()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 90, 91, 100, 101, 102, 103, 123, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = JavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(JavaParser.LBRACE)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343707135) != 0):
                self.state = 680
                self.variableInitializer()
                self.state = 685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 681
                        self.match(JavaParser.COMMA)
                        self.state = 682
                        self.variableInitializer() 
                    self.state = 687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 688
                    self.match(JavaParser.COMMA)




            self.state = 693
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeIdentifier(self):
            return self.getTypedRuleContext(JavaParser.TypeIdentifierContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = JavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 695
                    self.identifier()
                    self.state = 697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 696
                        self.typeArguments()


                    self.state = 699
                    self.match(JavaParser.DOT) 
                self.state = 705
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 706
            self.typeIdentifier()
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 707
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def EXTENDS(self):
            return self.getToken(JavaParser.EXTENDS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = JavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 710
                self.typeType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                    self.state = 711
                    self.annotation()
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 717
                self.match(JavaParser.QUESTION)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17 or _la==40:
                    self.state = 718
                    _la = self._input.LA(1)
                    if not(_la==17 or _la==40):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 719
                    self.typeType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = JavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.qualifiedName()
            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 725
                self.match(JavaParser.COMMA)
                self.state = 726
                self.qualifiedName()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def receiverParameter(self):
            return self.getTypedRuleContext(JavaParser.ReceiverParameterContext,0)


        def COMMA(self):
            return self.getToken(JavaParser.COMMA, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = JavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(JavaParser.LPAREN)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==123 or _la==129:
                    self.state = 733
                    self.receiverParameter()


                pass

            elif la_ == 2:
                self.state = 736
                self.receiverParameter()
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 737
                    self.match(JavaParser.COMMA)
                    self.state = 738
                    self.formalParameterList()


                pass

            elif la_ == 3:
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141986341) != 0) or _la==123 or _la==129:
                    self.state = 741
                    self.formalParameterList()


                pass


            self.state = 746
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = JavaParser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.typeType()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                self.state = 749
                self.identifier()
                self.state = 750
                self.match(JavaParser.DOT)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 757
            self.match(JavaParser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(JavaParser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = JavaParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.formalParameter()
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 760
                        self.match(JavaParser.COMMA)
                        self.state = 761
                        self.formalParameter() 
                    self.state = 766
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 767
                    self.match(JavaParser.COMMA)
                    self.state = 768
                    self.lastFormalParameter()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = JavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_formalParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 774
                    self.variableModifier() 
                self.state = 779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 780
            self.typeType()
            self.state = 781
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(JavaParser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = JavaParser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 783
                    self.variableModifier() 
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

            self.state = 789
            self.typeType()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                self.state = 790
                self.annotation()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 796
            self.match(JavaParser.ELLIPSIS)
            self.state = 797
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaLVTIParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.LambdaLVTIParameterContext)
            else:
                return self.getTypedRuleContext(JavaParser.LambdaLVTIParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIList" ):
                listener.enterLambdaLVTIList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIList" ):
                listener.exitLambdaLVTIList(self)




    def lambdaLVTIList(self):

        localctx = JavaParser.LambdaLVTIListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_lambdaLVTIList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.lambdaLVTIParameter()
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 800
                self.match(JavaParser.COMMA)
                self.state = 801
                self.lambdaLVTIParameter()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaLVTIParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaLVTIParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaLVTIParameter" ):
                listener.enterLambdaLVTIParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaLVTIParameter" ):
                listener.exitLambdaLVTIParameter(self)




    def lambdaLVTIParameter(self):

        localctx = JavaParser.LambdaLVTIParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_lambdaLVTIParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 807
                    self.variableModifier() 
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

            self.state = 813
            self.match(JavaParser.VAR)
            self.state = 814
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = JavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.identifier()
            self.state = 821
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 817
                    self.match(JavaParser.DOT)
                    self.state = 818
                    self.identifier() 
                self.state = 823
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(JavaParser.IntegerLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(JavaParser.FloatLiteralContext,0)


        def CHAR_LITERAL(self):
            return self.getToken(JavaParser.CHAR_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(JavaParser.STRING_LITERAL, 0)

        def BOOL_LITERAL(self):
            return self.getToken(JavaParser.BOOL_LITERAL, 0)

        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def TEXT_BLOCK(self):
            return self.getToken(JavaParser.TEXT_BLOCK, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = JavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_literal)
        try:
            self.state = 831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.integerLiteral()
                pass
            elif token in [71, 72]:
                self.enterOuterAlt(localctx, 2)
                self.state = 825
                self.floatLiteral()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 3)
                self.state = 826
                self.match(JavaParser.CHAR_LITERAL)
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 4)
                self.state = 827
                self.match(JavaParser.STRING_LITERAL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 828
                self.match(JavaParser.BOOL_LITERAL)
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 6)
                self.state = 829
                self.match(JavaParser.NULL_LITERAL)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 7)
                self.state = 830
                self.match(JavaParser.TEXT_BLOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(JavaParser.DECIMAL_LITERAL, 0)

        def HEX_LITERAL(self):
            return self.getToken(JavaParser.HEX_LITERAL, 0)

        def OCT_LITERAL(self):
            return self.getToken(JavaParser.OCT_LITERAL, 0)

        def BINARY_LITERAL(self):
            return self.getToken(JavaParser.BINARY_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = JavaParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(JavaParser.FLOAT_LITERAL, 0)

        def HEX_FLOAT_LITERAL(self):
            return self.getToken(JavaParser.HEX_FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)




    def floatLiteral(self):

        localctx = JavaParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            _la = self._input.LA(1)
            if not(_la==71 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AltAnnotationQualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def getRuleIndex(self):
            return JavaParser.RULE_altAnnotationQualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAltAnnotationQualifiedName" ):
                listener.enterAltAnnotationQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAltAnnotationQualifiedName" ):
                listener.exitAltAnnotationQualifiedName(self)




    def altAnnotationQualifiedName(self):

        localctx = JavaParser.AltAnnotationQualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_altAnnotationQualifiedName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                self.state = 837
                self.identifier()
                self.state = 838
                self.match(JavaParser.DOT)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 845
            self.match(JavaParser.AT)
            self.state = 846
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def altAnnotationQualifiedName(self):
            return self.getTypedRuleContext(JavaParser.AltAnnotationQualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def elementValuePairs(self):
            return self.getTypedRuleContext(JavaParser.ElementValuePairsContext,0)


        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = JavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 848
                self.match(JavaParser.AT)
                self.state = 849
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.state = 850
                self.altAnnotationQualifiedName()
                pass


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==78:
                self.state = 853
                self.match(JavaParser.LPAREN)
                self.state = 856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.elementValuePairs()

                elif la_ == 2:
                    self.state = 855
                    self.elementValue()


                self.state = 858
                self.match(JavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairs" ):
                listener.enterElementValuePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairs" ):
                listener.exitElementValuePairs(self)




    def elementValuePairs(self):

        localctx = JavaParser.ElementValuePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_elementValuePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.elementValuePair()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 862
                self.match(JavaParser.COMMA)
                self.state = 863
                self.elementValuePair()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = JavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.identifier()
            self.state = 870
            self.match(JavaParser.ASSIGN)
            self.state = 871
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(JavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = JavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_elementValue)
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(JavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = JavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(JavaParser.LBRACE)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343707135) != 0):
                self.state = 879
                self.elementValue()
                self.state = 884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 880
                        self.match(JavaParser.COMMA)
                        self.state = 881
                        self.elementValue() 
                    self.state = 886
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)



            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 889
                self.match(JavaParser.COMMA)


            self.state = 892
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(JavaParser.AT, 0)

        def INTERFACE(self):
            return self.getToken(JavaParser.INTERFACE, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def annotationTypeBody(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = JavaParser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(JavaParser.AT)
            self.state = 895
            self.match(JavaParser.INTERFACE)
            self.state = 896
            self.identifier()
            self.state = 897
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def annotationTypeElementDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationTypeElementDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationTypeElementDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = JavaParser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(JavaParser.LBRACE)
            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1613058852699350) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 576460752304472071) != 0) or _la==129:
                self.state = 900
                self.annotationTypeElementDeclaration()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 906
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeElementRestContext,0)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModifierContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = JavaParser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_annotationTypeElementDeclaration)
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 3, 5, 8, 9, 14, 16, 18, 20, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 908
                        self.modifier() 
                    self.state = 913
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 914
                self.annotationTypeElementRest()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 915
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def annotationMethodOrConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodOrConstantRestContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(JavaParser.EnumDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.AnnotationTypeDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationTypeElementRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementRest" ):
                listener.enterAnnotationTypeElementRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementRest" ):
                listener.exitAnnotationTypeElementRest(self)




    def annotationTypeElementRest(self):

        localctx = JavaParser.AnnotationTypeElementRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_annotationTypeElementRest)
        try:
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 918
                self.typeType()
                self.state = 919
                self.annotationMethodOrConstantRest()
                self.state = 920
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 922
                self.classDeclaration()
                self.state = 924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 923
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 926
                self.interfaceDeclaration()
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 927
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 930
                self.enumDeclaration()
                self.state = 932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 934
                self.annotationTypeDeclaration()
                self.state = 936
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 935
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 938
                self.recordDeclaration()
                self.state = 940
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.match(JavaParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodOrConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationMethodRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationMethodRestContext,0)


        def annotationConstantRest(self):
            return self.getTypedRuleContext(JavaParser.AnnotationConstantRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodOrConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodOrConstantRest" ):
                listener.enterAnnotationMethodOrConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodOrConstantRest" ):
                listener.exitAnnotationMethodOrConstantRest(self)




    def annotationMethodOrConstantRest(self):

        localctx = JavaParser.AnnotationMethodOrConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_annotationMethodOrConstantRest)
        try:
            self.state = 946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.annotationMethodRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.annotationConstantRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationMethodRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(JavaParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationMethodRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationMethodRest" ):
                listener.enterAnnotationMethodRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationMethodRest" ):
                listener.exitAnnotationMethodRest(self)




    def annotationMethodRest(self):

        localctx = JavaParser.AnnotationMethodRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_annotationMethodRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.identifier()
            self.state = 949
            self.match(JavaParser.LPAREN)
            self.state = 950
            self.match(JavaParser.RPAREN)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 951
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationConstantRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_annotationConstantRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationConstantRest" ):
                listener.enterAnnotationConstantRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationConstantRest" ):
                listener.exitAnnotationConstantRest(self)




    def annotationConstantRest(self):

        localctx = JavaParser.AnnotationConstantRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_annotationConstantRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.variableDeclarators()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(JavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = JavaParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(JavaParser.DEFAULT)
            self.state = 957
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def moduleBody(self):
            return self.getTypedRuleContext(JavaParser.ModuleBodyContext,0)


        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDeclaration" ):
                listener.enterModuleDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDeclaration" ):
                listener.exitModuleDeclaration(self)




    def moduleDeclaration(self):

        localctx = JavaParser.ModuleDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_moduleDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 959
                self.match(JavaParser.OPEN)


            self.state = 962
            self.match(JavaParser.MODULE)
            self.state = 963
            self.qualifiedName()
            self.state = 964
            self.moduleBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def moduleDirective(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ModuleDirectiveContext)
            else:
                return self.getTypedRuleContext(JavaParser.ModuleDirectiveContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_moduleBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleBody" ):
                listener.enterModuleBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleBody" ):
                listener.exitModuleBody(self)




    def moduleBody(self):

        localctx = JavaParser.ModuleBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_moduleBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(JavaParser.LBRACE)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 495395959010754560) != 0):
                self.state = 967
                self.moduleDirective()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 973
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleDirectiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def requiresModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RequiresModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.RequiresModifierContext,i)


        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_moduleDirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleDirective" ):
                listener.enterModuleDirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleDirective" ):
                listener.exitModuleDirective(self)




    def moduleDirective(self):

        localctx = JavaParser.ModuleDirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_moduleDirective)
        self._la = 0 # Token type
        try:
            self.state = 1011
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.match(JavaParser.REQUIRES)
                self.state = 979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 976
                        self.requiresModifier() 
                    self.state = 981
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 982
                self.qualifiedName()
                self.state = 983
                self.match(JavaParser.SEMI)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(JavaParser.EXPORTS)
                self.state = 986
                self.qualifiedName()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 987
                    self.match(JavaParser.TO)
                    self.state = 988
                    self.qualifiedName()


                self.state = 991
                self.match(JavaParser.SEMI)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 993
                self.match(JavaParser.OPENS)
                self.state = 994
                self.qualifiedName()
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 995
                    self.match(JavaParser.TO)
                    self.state = 996
                    self.qualifiedName()


                self.state = 999
                self.match(JavaParser.SEMI)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1001
                self.match(JavaParser.USES)
                self.state = 1002
                self.qualifiedName()
                self.state = 1003
                self.match(JavaParser.SEMI)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1005
                self.match(JavaParser.PROVIDES)
                self.state = 1006
                self.qualifiedName()
                self.state = 1007
                self.match(JavaParser.WITH)
                self.state = 1008
                self.qualifiedName()
                self.state = 1009
                self.match(JavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequiresModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def STATIC(self):
            return self.getToken(JavaParser.STATIC, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_requiresModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequiresModifier" ):
                listener.enterRequiresModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequiresModifier" ):
                listener.exitRequiresModifier(self)




    def requiresModifier(self):

        localctx = JavaParser.RequiresModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_requiresModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            _la = self._input.LA(1)
            if not(_la==38 or _la==60):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def recordHeader(self):
            return self.getTypedRuleContext(JavaParser.RecordHeaderContext,0)


        def recordBody(self):
            return self.getTypedRuleContext(JavaParser.RecordBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(JavaParser.TypeParametersContext,0)


        def IMPLEMENTS(self):
            return self.getToken(JavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordDeclaration" ):
                listener.enterRecordDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordDeclaration" ):
                listener.exitRecordDeclaration(self)




    def recordDeclaration(self):

        localctx = JavaParser.RecordDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_recordDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(JavaParser.RECORD)
            self.state = 1016
            self.identifier()
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1017
                self.typeParameters()


            self.state = 1020
            self.recordHeader()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1021
                self.match(JavaParser.IMPLEMENTS)
                self.state = 1022
                self.typeList()


            self.state = 1025
            self.recordBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def recordComponentList(self):
            return self.getTypedRuleContext(JavaParser.RecordComponentListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordHeader" ):
                listener.enterRecordHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordHeader" ):
                listener.exitRecordHeader(self)




    def recordHeader(self):

        localctx = JavaParser.RecordHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_recordHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(JavaParser.LPAREN)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141953573) != 0) or _la==123 or _la==129:
                self.state = 1028
                self.recordComponentList()


            self.state = 1031
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.RecordComponentContext)
            else:
                return self.getTypedRuleContext(JavaParser.RecordComponentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_recordComponentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponentList" ):
                listener.enterRecordComponentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponentList" ):
                listener.exitRecordComponentList(self)




    def recordComponentList(self):

        localctx = JavaParser.RecordComponentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_recordComponentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.recordComponent()
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1034
                self.match(JavaParser.COMMA)
                self.state = 1035
                self.recordComponent()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordComponentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_recordComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordComponent" ):
                listener.enterRecordComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordComponent" ):
                listener.exitRecordComponent(self)




    def recordComponent(self):

        localctx = JavaParser.RecordComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_recordComponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.typeType()
            self.state = 1042
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassBodyDeclarationContext,i)


        def compactConstructorDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CompactConstructorDeclarationContext)
            else:
                return self.getTypedRuleContext(JavaParser.CompactConstructorDeclarationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_recordBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordBody" ):
                listener.enterRecordBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordBody" ):
                listener.exitRecordBody(self)




    def recordBody(self):

        localctx = JavaParser.RecordBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_recordBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(JavaParser.LBRACE)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1331583875988694) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188146770765479943) != 0) or _la==129:
                self.state = 1047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1045
                    self.classBodyDeclaration()
                    pass

                elif la_ == 2:
                    self.state = 1046
                    self.compactConstructorDeclaration()
                    pass


                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1052
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = JavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(JavaParser.LBRACE)
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188147801758990335) != 0) or _la==129:
                self.state = 1055
                self.blockStatement()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1061
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def localTypeDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalTypeDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(JavaParser.StatementContext,0)


        def javadoc(self):
            return self.getTypedRuleContext(JavaParser.JavadocContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = JavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_blockStatement)
        try:
            self.state = 1069
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.localVariableDeclaration()
                self.state = 1064
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.localTypeDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1067
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1068
                self.javadoc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def variableDeclarators(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorsContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = JavaParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_localVariableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1071
                    self.variableModifier() 
                self.state = 1076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 1085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1077
                self.match(JavaParser.VAR)
                self.state = 1078
                self.identifier()
                self.state = 1079
                self.match(JavaParser.ASSIGN)
                self.state = 1080
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 1082
                self.typeType()
                self.state = 1083
                self.variableDeclarators()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = JavaParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def MODULE(self):
            return self.getToken(JavaParser.MODULE, 0)

        def OPEN(self):
            return self.getToken(JavaParser.OPEN, 0)

        def REQUIRES(self):
            return self.getToken(JavaParser.REQUIRES, 0)

        def EXPORTS(self):
            return self.getToken(JavaParser.EXPORTS, 0)

        def OPENS(self):
            return self.getToken(JavaParser.OPENS, 0)

        def TO(self):
            return self.getToken(JavaParser.TO, 0)

        def USES(self):
            return self.getToken(JavaParser.USES, 0)

        def PROVIDES(self):
            return self.getToken(JavaParser.PROVIDES, 0)

        def WITH(self):
            return self.getToken(JavaParser.WITH, 0)

        def TRANSITIVE(self):
            return self.getToken(JavaParser.TRANSITIVE, 0)

        def SEALED(self):
            return self.getToken(JavaParser.SEALED, 0)

        def PERMITS(self):
            return self.getToken(JavaParser.PERMITS, 0)

        def RECORD(self):
            return self.getToken(JavaParser.RECORD, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_typeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeIdentifier" ):
                listener.enterTypeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeIdentifier" ):
                listener.exitTypeIdentifier(self)




    def typeIdentifier(self):

        localctx = JavaParser.TypeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_typeIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            _la = self._input.LA(1)
            if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 29695) != 0) or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(JavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(JavaParser.InterfaceDeclarationContext,0)


        def recordDeclaration(self):
            return self.getTypedRuleContext(JavaParser.RecordDeclarationContext,0)


        def classOrInterfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ClassOrInterfaceModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.ClassOrInterfaceModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_localTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalTypeDeclaration" ):
                listener.enterLocalTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalTypeDeclaration" ):
                listener.exitLocalTypeDeclaration(self)




    def localTypeDeclaration(self):

        localctx = JavaParser.LocalTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_localTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1091
                    self.classOrInterfaceModifier() 
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 1100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.state = 1097
                self.classDeclaration()
                pass
            elif token in [28]:
                self.state = 1098
                self.interfaceDeclaration()
                pass
            elif token in [63]:
                self.state = 1099
                self.recordDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.blockLabel = None # BlockContext
            self.statementExpression = None # ExpressionContext
            self.identifierLabel = None # IdentifierContext

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def ASSERT(self):
            return self.getToken(JavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def IF(self):
            return self.getToken(JavaParser.IF, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(JavaParser.ELSE, 0)

        def FOR(self):
            return self.getToken(JavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(JavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def WHILE(self):
            return self.getToken(JavaParser.WHILE, 0)

        def DO(self):
            return self.getToken(JavaParser.DO, 0)

        def TRY(self):
            return self.getToken(JavaParser.TRY, 0)

        def finallyBlock(self):
            return self.getTypedRuleContext(JavaParser.FinallyBlockContext,0)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(JavaParser.CatchClauseContext,i)


        def resourceSpecification(self):
            return self.getTypedRuleContext(JavaParser.ResourceSpecificationContext,0)


        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def SYNCHRONIZED(self):
            return self.getToken(JavaParser.SYNCHRONIZED, 0)

        def RETURN(self):
            return self.getToken(JavaParser.RETURN, 0)

        def THROW(self):
            return self.getToken(JavaParser.THROW, 0)

        def BREAK(self):
            return self.getToken(JavaParser.BREAK, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def CONTINUE(self):
            return self.getToken(JavaParser.CONTINUE, 0)

        def YIELD(self):
            return self.getToken(JavaParser.YIELD, 0)

        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = JavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                localctx.blockLabel = self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.match(JavaParser.ASSERT)
                self.state = 1104
                self.expression(0)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 1105
                    self.match(JavaParser.COLON)
                    self.state = 1106
                    self.expression(0)


                self.state = 1109
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(JavaParser.IF)
                self.state = 1112
                self.parExpression()
                self.state = 1113
                self.statement()
                self.state = 1116
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1114
                    self.match(JavaParser.ELSE)
                    self.state = 1115
                    self.statement()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1118
                self.match(JavaParser.FOR)
                self.state = 1119
                self.match(JavaParser.LPAREN)
                self.state = 1120
                self.forControl()
                self.state = 1121
                self.match(JavaParser.RPAREN)
                self.state = 1122
                self.statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1124
                self.match(JavaParser.WHILE)
                self.state = 1125
                self.parExpression()
                self.state = 1126
                self.statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1128
                self.match(JavaParser.DO)
                self.state = 1129
                self.statement()
                self.state = 1130
                self.match(JavaParser.WHILE)
                self.state = 1131
                self.parExpression()
                self.state = 1132
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1134
                self.match(JavaParser.TRY)
                self.state = 1135
                self.block()
                self.state = 1145
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1137 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1136
                        self.catchClause()
                        self.state = 1139 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==7):
                            break

                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==19:
                        self.state = 1141
                        self.finallyBlock()


                    pass
                elif token in [19]:
                    self.state = 1144
                    self.finallyBlock()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1147
                self.match(JavaParser.TRY)
                self.state = 1148
                self.resourceSpecification()
                self.state = 1149
                self.block()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1150
                    self.catchClause()
                    self.state = 1155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 1156
                    self.finallyBlock()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1159
                self.match(JavaParser.SWITCH)
                self.state = 1160
                self.parExpression()
                self.state = 1161
                self.match(JavaParser.LBRACE)
                self.state = 1165
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1162
                        self.switchBlockStatementGroup() 
                    self.state = 1167
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6 or _la==12:
                    self.state = 1168
                    self.switchLabel()
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1174
                self.match(JavaParser.RBRACE)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1176
                self.match(JavaParser.SYNCHRONIZED)
                self.state = 1177
                self.parExpression()
                self.state = 1178
                self.block()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1180
                self.match(JavaParser.RETURN)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1181
                    self.expression(0)


                self.state = 1184
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1185
                self.match(JavaParser.THROW)
                self.state = 1186
                self.expression(0)
                self.state = 1187
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1189
                self.match(JavaParser.BREAK)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                    self.state = 1190
                    self.identifier()


                self.state = 1193
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1194
                self.match(JavaParser.CONTINUE)
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==129:
                    self.state = 1195
                    self.identifier()


                self.state = 1198
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1199
                self.match(JavaParser.YIELD)
                self.state = 1200
                self.expression(0)
                self.state = 1201
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1203
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1204
                localctx.statementExpression = self.expression(0)
                self.state = 1205
                self.match(JavaParser.SEMI)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1207
                self.switchExpression()
                self.state = 1209
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1208
                    self.match(JavaParser.SEMI)


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1211
                localctx.identifierLabel = self.identifier()
                self.state = 1212
                self.match(JavaParser.COLON)
                self.state = 1213
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(JavaParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def catchType(self):
            return self.getTypedRuleContext(JavaParser.CatchTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = JavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(JavaParser.CATCH)
            self.state = 1218
            self.match(JavaParser.LPAREN)
            self.state = 1222
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1219
                    self.variableModifier() 
                self.state = 1224
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

            self.state = 1225
            self.catchType()
            self.state = 1226
            self.identifier()
            self.state = 1227
            self.match(JavaParser.RPAREN)
            self.state = 1228
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(JavaParser.QualifiedNameContext,i)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITOR)
            else:
                return self.getToken(JavaParser.BITOR, i)

        def getRuleIndex(self):
            return JavaParser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = JavaParser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.qualifiedName()
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==107:
                self.state = 1231
                self.match(JavaParser.BITOR)
                self.state = 1232
                self.qualifiedName()
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(JavaParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)




    def finallyBlock(self):

        localctx = JavaParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(JavaParser.FINALLY)
            self.state = 1239
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def resources(self):
            return self.getTypedRuleContext(JavaParser.ResourcesContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(JavaParser.SEMI, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = JavaParser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self.match(JavaParser.LPAREN)
            self.state = 1242
            self.resources()
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 1243
                self.match(JavaParser.SEMI)


            self.state = 1246
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ResourceContext)
            else:
                return self.getTypedRuleContext(JavaParser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def getRuleIndex(self):
            return JavaParser.RULE_resources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResources" ):
                listener.enterResources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResources" ):
                listener.exitResources(self)




    def resources(self):

        localctx = JavaParser.ResourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_resources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.resource()
            self.state = 1253
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1249
                    self.match(JavaParser.SEMI)
                    self.state = 1250
                    self.resource() 
                self.state = 1255
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def qualifiedName(self):
            return self.getTypedRuleContext(JavaParser.QualifiedNameContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = JavaParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_resource)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1256
                        self.variableModifier() 
                    self.state = 1261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 1267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 1262
                    self.classOrInterfaceType()
                    self.state = 1263
                    self.variableDeclaratorId()
                    pass

                elif la_ == 2:
                    self.state = 1265
                    self.match(JavaParser.VAR)
                    self.state = 1266
                    self.identifier()
                    pass


                self.state = 1269
                self.match(JavaParser.ASSIGN)
                self.state = 1270
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.qualifiedName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = JavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1275
                self.switchLabel()
                self.state = 1278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==6 or _la==12):
                    break

            self.state = 1281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1280
                self.blockStatement()
                self.state = 1283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188147801758990335) != 0) or _la==129):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constantExpression = None # ExpressionContext
            self.enumConstantName = None # Token
            self.varName = None # IdentifierContext

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def IDENTIFIER(self):
            return self.getToken(JavaParser.IDENTIFIER, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = JavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_switchLabel)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.match(JavaParser.CASE)
                self.state = 1291
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    localctx.constantExpression = self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 1287
                    localctx.enumConstantName = self.match(JavaParser.IDENTIFIER)
                    pass

                elif la_ == 3:
                    self.state = 1288
                    self.typeType()
                    self.state = 1289
                    localctx.varName = self.identifier()
                    pass


                self.state = 1293
                self.match(JavaParser.COLON)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1294
                self.match(JavaParser.DEFAULT)
                self.state = 1295
                self.match(JavaParser.COLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.forUpdate = None # ExpressionListContext

        def enhancedForControl(self):
            return self.getTypedRuleContext(JavaParser.EnhancedForControlContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.SEMI)
            else:
                return self.getToken(JavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(JavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = JavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_forControl)
        self._la = 0 # Token type
        try:
            self.state = 1310
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610998821) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1299
                    self.forInit()


                self.state = 1302
                self.match(JavaParser.SEMI)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1303
                    self.expression(0)


                self.state = 1306
                self.match(JavaParser.SEMI)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                    self.state = 1307
                    localctx.forUpdate = self.expressionList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(JavaParser.LocalVariableDeclarationContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = JavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_forInit)
        try:
            self.state = 1314
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1312
                self.localVariableDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.expressionList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(JavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def VAR(self):
            return self.getToken(JavaParser.VAR, 0)

        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = JavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1316
                    self.variableModifier() 
                self.state = 1321
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1322
                self.typeType()
                pass

            elif la_ == 2:
                self.state = 1323
                self.match(JavaParser.VAR)
                pass


            self.state = 1326
            self.variableDeclaratorId()
            self.state = 1327
            self.match(JavaParser.COLON)
            self.state = 1328
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_parExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParExpression" ):
                listener.enterParExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParExpression" ):
                listener.exitParExpression(self)




    def parExpression(self):

        localctx = JavaParser.ParExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_parExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1330
            self.match(JavaParser.LPAREN)
            self.state = 1331
            self.expression(0)
            self.state = 1332
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = JavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.expression(0)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1335
                self.match(JavaParser.COMMA)
                self.state = 1336
                self.expression(0)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_methodCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCall" ):
                listener.enterMethodCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCall" ):
                listener.exitMethodCall(self)




    def methodCall(self):

        localctx = JavaParser.MethodCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_methodCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.state = 1342
                self.identifier()
                pass
            elif token in [43]:
                self.state = 1343
                self.match(JavaParser.THIS)
                pass
            elif token in [40]:
                self.state = 1344
                self.match(JavaParser.SUPER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1347
            self.arguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.prefix = None # Token
            self.bop = None # Token
            self.postfix = None # Token

        def primary(self):
            return self.getTypedRuleContext(JavaParser.PrimaryContext,0)


        def methodCall(self):
            return self.getTypedRuleContext(JavaParser.MethodCallContext,0)


        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COLONCOLON(self):
            return self.getToken(JavaParser.COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def NEW(self):
            return self.getToken(JavaParser.NEW, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def classType(self):
            return self.getTypedRuleContext(JavaParser.ClassTypeContext,0)


        def switchExpression(self):
            return self.getTypedRuleContext(JavaParser.SwitchExpressionContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def ADD(self):
            return self.getToken(JavaParser.ADD, 0)

        def SUB(self):
            return self.getToken(JavaParser.SUB, 0)

        def INC(self):
            return self.getToken(JavaParser.INC, 0)

        def DEC(self):
            return self.getToken(JavaParser.DEC, 0)

        def TILDE(self):
            return self.getToken(JavaParser.TILDE, 0)

        def BANG(self):
            return self.getToken(JavaParser.BANG, 0)

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.BITAND)
            else:
                return self.getToken(JavaParser.BITAND, i)

        def creator(self):
            return self.getTypedRuleContext(JavaParser.CreatorContext,0)


        def lambdaExpression(self):
            return self.getTypedRuleContext(JavaParser.LambdaExpressionContext,0)


        def MUL(self):
            return self.getToken(JavaParser.MUL, 0)

        def DIV(self):
            return self.getToken(JavaParser.DIV, 0)

        def MOD(self):
            return self.getToken(JavaParser.MOD, 0)

        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LT)
            else:
                return self.getToken(JavaParser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.GT)
            else:
                return self.getToken(JavaParser.GT, i)

        def LE(self):
            return self.getToken(JavaParser.LE, 0)

        def GE(self):
            return self.getToken(JavaParser.GE, 0)

        def EQUAL(self):
            return self.getToken(JavaParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(JavaParser.NOTEQUAL, 0)

        def CARET(self):
            return self.getToken(JavaParser.CARET, 0)

        def BITOR(self):
            return self.getToken(JavaParser.BITOR, 0)

        def AND(self):
            return self.getToken(JavaParser.AND, 0)

        def OR(self):
            return self.getToken(JavaParser.OR, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def QUESTION(self):
            return self.getToken(JavaParser.QUESTION, 0)

        def ASSIGN(self):
            return self.getToken(JavaParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(JavaParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(JavaParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(JavaParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(JavaParser.DIV_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(JavaParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(JavaParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(JavaParser.XOR_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.URSHIFT_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(JavaParser.LSHIFT_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(JavaParser.MOD_ASSIGN, 0)

        def LBRACK(self):
            return self.getToken(JavaParser.LBRACK, 0)

        def RBRACK(self):
            return self.getToken(JavaParser.RBRACK, 0)

        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def innerCreator(self):
            return self.getTypedRuleContext(JavaParser.InnerCreatorContext,0)


        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def explicitGenericInvocation(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def INSTANCEOF(self):
            return self.getToken(JavaParser.INSTANCEOF, 0)

        def pattern(self):
            return self.getTypedRuleContext(JavaParser.PatternContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 204
        self.enterRecursionRule(localctx, 204, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1350
                self.primary()
                pass

            elif la_ == 2:
                self.state = 1351
                self.methodCall()
                pass

            elif la_ == 3:
                self.state = 1352
                self.typeType()
                self.state = 1353
                self.match(JavaParser.COLONCOLON)
                self.state = 1359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 89, 129]:
                    self.state = 1355
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 1354
                        self.typeArguments()


                    self.state = 1357
                    self.identifier()
                    pass
                elif token in [31]:
                    self.state = 1358
                    self.match(JavaParser.NEW)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.state = 1361
                self.classType()
                self.state = 1362
                self.match(JavaParser.COLONCOLON)
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1363
                    self.typeArguments()


                self.state = 1366
                self.match(JavaParser.NEW)
                pass

            elif la_ == 5:
                self.state = 1368
                self.switchExpression()
                pass

            elif la_ == 6:
                self.state = 1369
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & 15363) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1370
                self.expression(17)
                pass

            elif la_ == 7:
                self.state = 1371
                self.match(JavaParser.LPAREN)
                self.state = 1375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1372
                        self.annotation() 
                    self.state = 1377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 1378
                self.typeType()
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==106:
                    self.state = 1379
                    self.match(JavaParser.BITAND)
                    self.state = 1380
                    self.typeType()
                    self.state = 1385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1386
                self.match(JavaParser.RPAREN)
                self.state = 1387
                self.expression(16)
                pass

            elif la_ == 8:
                self.state = 1389
                self.match(JavaParser.NEW)
                self.state = 1390
                self.creator()
                pass

            elif la_ == 9:
                self.state = 1391
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1475
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1394
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1395
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 35) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1396
                        self.expression(15)
                        pass

                    elif la_ == 2:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1397
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1398
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==102 or _la==103):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1399
                        self.expression(14)
                        pass

                    elif la_ == 3:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1400
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1408
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                        if la_ == 1:
                            self.state = 1401
                            self.match(JavaParser.LT)
                            self.state = 1402
                            self.match(JavaParser.LT)
                            pass

                        elif la_ == 2:
                            self.state = 1403
                            self.match(JavaParser.GT)
                            self.state = 1404
                            self.match(JavaParser.GT)
                            self.state = 1405
                            self.match(JavaParser.GT)
                            pass

                        elif la_ == 3:
                            self.state = 1406
                            self.match(JavaParser.GT)
                            self.state = 1407
                            self.match(JavaParser.GT)
                            pass


                        self.state = 1410
                        self.expression(13)
                        pass

                    elif la_ == 4:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1411
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 1412
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & 387) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1413
                        self.expression(12)
                        pass

                    elif la_ == 5:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1414
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1415
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==94 or _la==97):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1416
                        self.expression(10)
                        pass

                    elif la_ == 6:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1417
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1418
                        localctx.bop = self.match(JavaParser.BITAND)
                        self.state = 1419
                        self.expression(9)
                        pass

                    elif la_ == 7:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1420
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1421
                        localctx.bop = self.match(JavaParser.CARET)
                        self.state = 1422
                        self.expression(8)
                        pass

                    elif la_ == 8:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1423
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1424
                        localctx.bop = self.match(JavaParser.BITOR)
                        self.state = 1425
                        self.expression(7)
                        pass

                    elif la_ == 9:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1426
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1427
                        localctx.bop = self.match(JavaParser.AND)
                        self.state = 1428
                        self.expression(6)
                        pass

                    elif la_ == 10:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1429
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1430
                        localctx.bop = self.match(JavaParser.OR)
                        self.state = 1431
                        self.expression(5)
                        pass

                    elif la_ == 11:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1432
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1433
                        localctx.bop = self.match(JavaParser.QUESTION)
                        self.state = 1434
                        self.expression(0)
                        self.state = 1435
                        self.match(JavaParser.COLON)
                        self.state = 1436
                        self.expression(3)
                        pass

                    elif la_ == 12:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1438
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1439
                        localctx.bop = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 17171480577) != 0)):
                            localctx.bop = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1440
                        self.expression(2)
                        pass

                    elif la_ == 13:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1441
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 1442
                        self.match(JavaParser.LBRACK)
                        self.state = 1443
                        self.expression(0)
                        self.state = 1444
                        self.match(JavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1446
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 1447
                        localctx.bop = self.match(JavaParser.DOT)
                        self.state = 1459
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                        if la_ == 1:
                            self.state = 1448
                            self.identifier()
                            pass

                        elif la_ == 2:
                            self.state = 1449
                            self.methodCall()
                            pass

                        elif la_ == 3:
                            self.state = 1450
                            self.match(JavaParser.THIS)
                            pass

                        elif la_ == 4:
                            self.state = 1451
                            self.match(JavaParser.NEW)
                            self.state = 1453
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==89:
                                self.state = 1452
                                self.nonWildcardTypeArguments()


                            self.state = 1455
                            self.innerCreator()
                            pass

                        elif la_ == 5:
                            self.state = 1456
                            self.match(JavaParser.SUPER)
                            self.state = 1457
                            self.superSuffix()
                            pass

                        elif la_ == 6:
                            self.state = 1458
                            self.explicitGenericInvocation()
                            pass


                        pass

                    elif la_ == 15:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1461
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 1462
                        self.match(JavaParser.COLONCOLON)
                        self.state = 1464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==89:
                            self.state = 1463
                            self.typeArguments()


                        self.state = 1466
                        self.identifier()
                        pass

                    elif la_ == 16:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1467
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 1468
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==100 or _la==101):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 17:
                        localctx = JavaParser.ExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 1469
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 1470
                        localctx.bop = self.match(JavaParser.INSTANCEOF)
                        self.state = 1473
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                        if la_ == 1:
                            self.state = 1471
                            self.typeType()
                            pass

                        elif la_ == 2:
                            self.state = 1472
                            self.pattern()
                            pass


                        pass

             
                self.state = 1479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = JavaParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1480
                    self.variableModifier() 
                self.state = 1485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 1486
            self.typeType()
            self.state = 1490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1487
                    self.annotation() 
                self.state = 1492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

            self.state = 1493
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(JavaParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(JavaParser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = JavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.lambdaParameters()
            self.state = 1496
            self.match(JavaParser.ARROW)
            self.state = 1497
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(JavaParser.FormalParameterListContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def lambdaLVTIList(self):
            return self.getTypedRuleContext(JavaParser.LambdaLVTIListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = JavaParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 1521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1500
                self.match(JavaParser.LPAREN)
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223090579141986341) != 0) or _la==123 or _la==129:
                    self.state = 1501
                    self.formalParameterList()


                self.state = 1504
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1505
                self.match(JavaParser.LPAREN)
                self.state = 1506
                self.identifier()
                self.state = 1511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 1507
                    self.match(JavaParser.COMMA)
                    self.state = 1508
                    self.identifier()
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1514
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1516
                self.match(JavaParser.LPAREN)
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 281466386776065) != 0) or _la==123 or _la==129:
                    self.state = 1517
                    self.lambdaLVTIList()


                self.state = 1520
                self.match(JavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = JavaParser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_lambdaBody)
        try:
            self.state = 1525
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 41, 43, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 90, 91, 100, 101, 102, 103, 123, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.expression(0)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(JavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(JavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(JavaParser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeTypeOrVoid(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeOrVoidContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(JavaParser.CLASS, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = JavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_primary)
        try:
            self.state = 1545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1527
                self.match(JavaParser.LPAREN)
                self.state = 1528
                self.expression(0)
                self.state = 1529
                self.match(JavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1531
                self.match(JavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1532
                self.match(JavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1533
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1534
                self.identifier()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1535
                self.typeTypeOrVoid()
                self.state = 1536
                self.match(JavaParser.DOT)
                self.state = 1537
                self.match(JavaParser.CLASS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1539
                self.nonWildcardTypeArguments()
                self.state = 1543
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                    self.state = 1540
                    self.explicitGenericInvocationSuffix()
                    pass
                elif token in [43]:
                    self.state = 1541
                    self.match(JavaParser.THIS)
                    self.state = 1542
                    self.arguments()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(JavaParser.SWITCH, 0)

        def parExpression(self):
            return self.getTypedRuleContext(JavaParser.ParExpressionContext,0)


        def LBRACE(self):
            return self.getToken(JavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(JavaParser.RBRACE, 0)

        def switchLabeledRule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.SwitchLabeledRuleContext)
            else:
                return self.getTypedRuleContext(JavaParser.SwitchLabeledRuleContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchExpression" ):
                listener.enterSwitchExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchExpression" ):
                listener.exitSwitchExpression(self)




    def switchExpression(self):

        localctx = JavaParser.SwitchExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_switchExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1547
            self.match(JavaParser.SWITCH)
            self.state = 1548
            self.parExpression()
            self.state = 1549
            self.match(JavaParser.LBRACE)
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1550
                self.switchLabeledRule()
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1556
            self.match(JavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabeledRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(JavaParser.CASE, 0)

        def switchRuleOutcome(self):
            return self.getTypedRuleContext(JavaParser.SwitchRuleOutcomeContext,0)


        def ARROW(self):
            return self.getToken(JavaParser.ARROW, 0)

        def COLON(self):
            return self.getToken(JavaParser.COLON, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def NULL_LITERAL(self):
            return self.getToken(JavaParser.NULL_LITERAL, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def DEFAULT(self):
            return self.getToken(JavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_switchLabeledRule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabeledRule" ):
                listener.enterSwitchLabeledRule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabeledRule" ):
                listener.exitSwitchLabeledRule(self)




    def switchLabeledRule(self):

        localctx = JavaParser.SwitchLabeledRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_switchLabeledRule)
        self._la = 0 # Token type
        try:
            self.state = 1569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1558
                self.match(JavaParser.CASE)
                self.state = 1562
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1559
                    self.expressionList()
                    pass

                elif la_ == 2:
                    self.state = 1560
                    self.match(JavaParser.NULL_LITERAL)
                    pass

                elif la_ == 3:
                    self.state = 1561
                    self.guardedPattern(0)
                    pass


                self.state = 1564
                _la = self._input.LA(1)
                if not(_la==93 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1565
                self.switchRuleOutcome()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1566
                self.match(JavaParser.DEFAULT)
                self.state = 1567
                _la = self._input.LA(1)
                if not(_la==93 or _la==121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568
                self.switchRuleOutcome()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardedPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def guardedPattern(self):
            return self.getTypedRuleContext(JavaParser.GuardedPatternContext,0)


        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def typeType(self):
            return self.getTypedRuleContext(JavaParser.TypeTypeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.AND)
            else:
                return self.getToken(JavaParser.AND, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_guardedPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuardedPattern" ):
                listener.enterGuardedPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuardedPattern" ):
                listener.exitGuardedPattern(self)



    def guardedPattern(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = JavaParser.GuardedPatternContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_guardedPattern, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.state = 1572
                self.match(JavaParser.LPAREN)
                self.state = 1573
                self.guardedPattern(0)
                self.state = 1574
                self.match(JavaParser.RPAREN)
                pass
            elif token in [3, 5, 8, 14, 18, 20, 27, 29, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 123, 129]:
                self.state = 1579
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1576
                        self.variableModifier() 
                    self.state = 1581
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

                self.state = 1582
                self.typeType()
                self.state = 1586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1583
                        self.annotation() 
                    self.state = 1588
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                self.state = 1589
                self.identifier()
                self.state = 1594
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1590
                        self.match(JavaParser.AND)
                        self.state = 1591
                        self.expression(0) 
                    self.state = 1596
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1604
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = JavaParser.GuardedPatternContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_guardedPattern)
                    self.state = 1599
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1600
                    self.match(JavaParser.AND)
                    self.state = 1601
                    self.expression(0) 
                self.state = 1606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SwitchRuleOutcomeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(JavaParser.BlockContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(JavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_switchRuleOutcome

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchRuleOutcome" ):
                listener.enterSwitchRuleOutcome(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchRuleOutcome" ):
                listener.exitSwitchRuleOutcome(self)




    def switchRuleOutcome(self):

        localctx = JavaParser.SwitchRuleOutcomeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_switchRuleOutcome)
        self._la = 0 # Token type
        try:
            self.state = 1614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1607
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & -668508564985026) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5188147801758990335) != 0) or _la==129:
                    self.state = 1608
                    self.blockStatement()
                    self.state = 1613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = JavaParser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.state = 1616
                self.classOrInterfaceType()
                self.state = 1617
                self.match(JavaParser.DOT)


            self.state = 1624
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1621
                    self.annotation() 
                self.state = 1626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

            self.state = 1627
            self.identifier()
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1628
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(JavaParser.CreatedNameContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ArrayCreatorRestContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = JavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_creator)
        self._la = 0 # Token type
        try:
            self.state = 1640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1631
                    self.nonWildcardTypeArguments()


                self.state = 1634
                self.createdName()
                self.state = 1635
                self.classCreatorRest()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1637
                self.createdName()
                self.state = 1638
                self.arrayCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(JavaParser.IdentifierContext,i)


        def typeArgumentsOrDiamond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentsOrDiamondContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentsOrDiamondContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.DOT)
            else:
                return self.getToken(JavaParser.DOT, i)

        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = JavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_createdName)
        self._la = 0 # Token type
        try:
            self.state = 1657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.identifier()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1643
                    self.typeArgumentsOrDiamond()


                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1646
                    self.match(JavaParser.DOT)
                    self.state = 1647
                    self.identifier()
                    self.state = 1649
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==89:
                        self.state = 1648
                        self.typeArgumentsOrDiamond()


                    self.state = 1655
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1656
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InnerCreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(JavaParser.ClassCreatorRestContext,0)


        def nonWildcardTypeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsOrDiamondContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_innerCreator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerCreator" ):
                listener.enterInnerCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerCreator" ):
                listener.exitInnerCreator(self)




    def innerCreator(self):

        localctx = JavaParser.InnerCreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_innerCreator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.identifier()
            self.state = 1661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1660
                self.nonWildcardTypeArgumentsOrDiamond()


            self.state = 1663
            self.classCreatorRest()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arrayInitializer(self):
            return self.getTypedRuleContext(JavaParser.ArrayInitializerContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(JavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return JavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = JavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1667 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1665
                    self.match(JavaParser.LBRACK)
                    self.state = 1666
                    self.match(JavaParser.RBRACK)
                    self.state = 1669 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==82):
                        break

                self.state = 1671
                self.arrayInitializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1676 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1672
                        self.match(JavaParser.LBRACK)
                        self.state = 1673
                        self.expression(0)
                        self.state = 1674
                        self.match(JavaParser.RBRACK)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1678 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                self.state = 1684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1680
                        self.match(JavaParser.LBRACK)
                        self.state = 1681
                        self.match(JavaParser.RBRACK) 
                    self.state = 1686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(JavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = JavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_classCreatorRest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1689
            self.arguments()
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.state = 1690
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def explicitGenericInvocationSuffix(self):
            return self.getTypedRuleContext(JavaParser.ExplicitGenericInvocationSuffixContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocation" ):
                listener.enterExplicitGenericInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocation" ):
                listener.exitExplicitGenericInvocation(self)




    def explicitGenericInvocation(self):

        localctx = JavaParser.ExplicitGenericInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_explicitGenericInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693
            self.nonWildcardTypeArguments()
            self.state = 1694
            self.explicitGenericInvocationSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = JavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 1699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1696
                self.match(JavaParser.LT)
                self.state = 1697
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1698
                self.typeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def nonWildcardTypeArguments(self):
            return self.getTypedRuleContext(JavaParser.NonWildcardTypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArgumentsOrDiamond" ):
                listener.enterNonWildcardTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArgumentsOrDiamond" ):
                listener.exitNonWildcardTypeArgumentsOrDiamond(self)




    def nonWildcardTypeArgumentsOrDiamond(self):

        localctx = JavaParser.NonWildcardTypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_nonWildcardTypeArgumentsOrDiamond)
        try:
            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1701
                self.match(JavaParser.LT)
                self.state = 1702
                self.match(JavaParser.GT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.nonWildcardTypeArguments()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonWildcardTypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeList(self):
            return self.getTypedRuleContext(JavaParser.TypeListContext,0)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_nonWildcardTypeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonWildcardTypeArguments" ):
                listener.enterNonWildcardTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonWildcardTypeArguments" ):
                listener.exitNonWildcardTypeArguments(self)




    def nonWildcardTypeArguments(self):

        localctx = JavaParser.NonWildcardTypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_nonWildcardTypeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(JavaParser.LT)
            self.state = 1707
            self.typeList()
            self.state = 1708
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeTypeContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = JavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.typeType()
            self.state = 1715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1711
                self.match(JavaParser.COMMA)
                self.state = 1712
                self.typeType()
                self.state = 1717
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(JavaParser.ClassOrInterfaceTypeContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(JavaParser.PrimitiveTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(JavaParser.AnnotationContext,i)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.LBRACK)
            else:
                return self.getToken(JavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.RBRACK)
            else:
                return self.getToken(JavaParser.RBRACK, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeType" ):
                listener.enterTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeType" ):
                listener.exitTypeType(self)




    def typeType(self):

        localctx = JavaParser.TypeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_typeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1718
                    self.annotation() 
                self.state = 1723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

            self.state = 1726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.state = 1724
                self.classOrInterfaceType()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 37]:
                self.state = 1725
                self.primitiveType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 32767) != 0) or _la==123 or _la==129:
                        self.state = 1728
                        self.annotation()
                        self.state = 1733
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1734
                    self.match(JavaParser.LBRACK)
                    self.state = 1735
                    self.match(JavaParser.RBRACK) 
                self.state = 1740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(JavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(JavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(JavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(JavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(JavaParser.INT, 0)

        def LONG(self):
            return self.getToken(JavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(JavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(JavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = JavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1741
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138111107368) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(JavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(JavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(JavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(JavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(JavaParser.COMMA)
            else:
                return self.getToken(JavaParser.COMMA, i)

        def getRuleIndex(self):
            return JavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = JavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.match(JavaParser.LT)
            self.state = 1744
            self.typeArgument()
            self.state = 1749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==85:
                self.state = 1745
                self.match(JavaParser.COMMA)
                self.state = 1746
                self.typeArgument()
                self.state = 1751
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1752
            self.match(JavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(JavaParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(JavaParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = JavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_superSuffix)
        self._la = 0 # Token type
        try:
            self.state = 1763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1754
                self.arguments()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1755
                self.match(JavaParser.DOT)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==89:
                    self.state = 1756
                    self.typeArguments()


                self.state = 1759
                self.identifier()
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
                if la_ == 1:
                    self.state = 1760
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitGenericInvocationSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(JavaParser.SUPER, 0)

        def superSuffix(self):
            return self.getTypedRuleContext(JavaParser.SuperSuffixContext,0)


        def identifier(self):
            return self.getTypedRuleContext(JavaParser.IdentifierContext,0)


        def arguments(self):
            return self.getTypedRuleContext(JavaParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_explicitGenericInvocationSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitGenericInvocationSuffix" ):
                listener.enterExplicitGenericInvocationSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitGenericInvocationSuffix" ):
                listener.exitExplicitGenericInvocationSuffix(self)




    def explicitGenericInvocationSuffix(self):

        localctx = JavaParser.ExplicitGenericInvocationSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_explicitGenericInvocationSuffix)
        try:
            self.state = 1770
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1765
                self.match(JavaParser.SUPER)
                self.state = 1766
                self.superSuffix()
                pass
            elif token in [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 129]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1767
                self.identifier()
                self.state = 1768
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(JavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(JavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(JavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return JavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = JavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(JavaParser.LPAREN)
            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 3)) & ~0x3f) == 0 and ((1 << (_la - 3)) & 9223127275610966053) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 4683743741343698943) != 0):
                self.state = 1773
                self.expressionList()


            self.state = 1776
            self.match(JavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JavadocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JAVADOC_COMMENT(self):
            return self.getToken(JavaParser.JAVADOC_COMMENT, 0)

        def getRuleIndex(self):
            return JavaParser.RULE_javadoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJavadoc" ):
                listener.enterJavadoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJavadoc" ):
                listener.exitJavadoc(self)




    def javadoc(self):

        localctx = JavaParser.JavadocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_javadoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1778
            self.match(JavaParser.JAVADOC_COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[102] = self.expression_sempred
        self._predicates[110] = self.guardedPattern_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 10)
         

    def guardedPattern_sempred(self, localctx:GuardedPatternContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         




